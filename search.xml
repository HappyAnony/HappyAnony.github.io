<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[自建博客路线图]]></title>
      <url>%2F2017%2F03%2F24%2F%E8%87%AA%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%B7%AF%E7%BA%BF%E5%9B%BE%2F</url>
      <content type="text"><![CDATA[思维导图 静态站点环境准备必备环境博客框架HexoJeKyll托管平台GithubCoding版本控制Git可选环境文本编辑器SubiimeVimAtomNotepad++控制终端CmderBashGit基本搭建HexoHexo+GithubHexo+CodingJeKyll主题优化HexoNexTyiliayeleelandscapeJeKyll深度优化动态站点环境准备基本搭建主题优化深度优化]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hexo主题之NexT]]></title>
      <url>%2F2017%2F03%2F23%2FHexo%E4%B8%BB%E9%A2%98%E4%B9%8BNexT%2F</url>
      <content type="text"><![CDATA[参考文档 NexT官方使用文档 前言说明 在 Hexo 中有两份主要的配置文件，其名称都是_config.yml。 其中，一份位于站点根目录下，主要包含Hexo本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。 为了描述方便，在以下说明中，将前者称为站点配置文件， 后者称为 主题配置文件。 想体验其他Hexo主题请在Hexo官方theme社区中搜索 基本使用安装NexT Hexo 安装主题的方式非常简单，只需要将主题文件拷贝至站点目录的 themes目录下， 然后修改下配置文件即可;安装步骤如下: 主题下载安装git克隆 如果你熟悉Git， 建议你使用 克隆最新版本 的方式，之后的更新可以通过git pull来快速更新， 而不用再次下载压缩包替换。 想深入了解git的使用请见：版本控制系统(VCS)之git;也可以通过《Pro Git》在线版本这本书来学习 基于ssh协议(建议使用该方法，不担心被墙) 在 Hexo 站点根目录下打开终端窗口。使用 Git checkout 代码： $ cd your-hexo-site $ git clone git@github.com:iissnan/hexo-theme-next.git themes/next 上述的ssh链接可以在主题的github主界面上copy到： 主题更新 $cd themes/next $git pull 基于https协议(有时被墙无法连接) 在 Hexo 站点根目录下打开终端窗口。使用 Git checkout 代码： $ cd your-hexo-site $ git clone https://github.com/iissnan/hexo-theme-next themes/next 上述的https链接可以在主题的github主界面上copy到： 主题更新 $cd themes/next $git pull 下载压缩包安装1.前往NexT版本发布页面或者NexTgithub主界面2.选择你所需要的版本。版本发布页面下载Download 区域下的Source Code (zip)(类Unix系统下载tar.gz格式)到本地；github主界面下载Clone and download区域下的Download Zip到本地 3.解压所下载的压缩包至站点的 themes目录下， 并将 解压后的文件夹名称hexo-theme-next-0.4.0更改为 next 启用主题 与所有 Hexo主题启用的模式一样。当克隆/下载完成后，打开站点配置文件，找到theme字段，并将其值更改为next。 到此，NexT 主题安装完成。下一步我们将验证主题是否正确启用。在切换主题之后、验证之前， 我们最好使用hexo clean来清除 Hexo 的缓存。 验证主题解析生成静态文件$hexo generate 启动本地Hexo服务器 可以开启调试模式（即加上 --debug）,命令如下 $hexo s --debug 在服务启动的过程，注意观察命令行输出是否有任何异常信息，如果你碰到问题，这些信息将帮助他人更好的定位错误。 当命令行输出如下信息时表示服务成功启动，可以使用浏览器预览 INFO Hexo is running at http://localhost:4000/. Press Ctrl+C to stop. 本地浏览器预览 此时即可使用浏览器访问http://localhost:4000，检查站点是否正确运行.当你看到站点的外观与下图所示类似时即说明你已成功安装 NexT主题。这是NexT 默认的 Scheme —— Muse 主题设定选择 Scheme Scheme 是 NexT 提供的一种特性，借助于 Scheme，NexT 为你提供多种不同的外观。同时，几乎所有的配置都可以在 Scheme 之间共用。目前 NexT 支持三种 Scheme，他们是： Muse - 默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白 Mist - Muse 的紧凑版本，整洁有序的单栏外观 Pisces - 双栏 Scheme，小家碧玉似的清新 Scheme的切换通过更改 主题配置文件，搜索 scheme 关键字。 你会看到有三行 scheme 的配置，将你需用启用的scheme 前面注释 # 去除即可，如下： 不同的Scheme值对应的页面中的menubar和sidebar显示效果不一样 设置 语言 编辑 站点配置文件， 将 language设置成你所需要的语言。建议明确设置你所需要的语言，例如选用简体中文，配置如下： language: zh-Hans 目前 NexT 支持的语言如以下表格所示： 设置菜单 菜单配置包括三个部分，第一是菜单项（名称和链接），第二是菜单项的显示文本，第三是菜单项对应的图标。通过编辑主题配置文件修改上述三部分。 菜单menu在面页中显示的位置根据Scheme值不同而不同 设定菜单项 设定菜单项，对应的字段是 menu。menu下的菜单项的设置格式是：item name: link。其中 item name 是菜单项的名称，这个名称并不直接显示在页面上，她将用于匹配图标以及翻译然后显示在页面上；link是菜单项的设定值，可以理解为文件路径(链接) 设定菜单项的显示文本 在第一步中设置的菜单的名称并不直接用于界面上的展示。Hexo 在生成的时候将使用 这个名称查找对应语言的翻译文本，提取翻译内容并显示。这些翻译文本放置在NexT 主题目录下的 languages/{language}.yml （{language} 是你在站点配置文件中language项配置的语言）。 以简体中文为例，若你需要添加一个菜单项，比如 others。那么就需要修改简体中文对应的翻译文件 languages/zh-Hans.yml，在menu 字段下添加这一项： 设定菜单项对应的图标 NexT使用的是Font Awesome 提供的图标， Font Awesome 提供了 600+ 的图标，可以满足绝大的多数的场景，同时无须担心在 Retina 屏幕下图标模糊的问题。 设定菜单项的图标，对应的字段是主题配置文件中的 menu_icons项。设定格式是 item name: icon name，其中 item name 与第一步设定的菜单项名字对应，icon name 是 Font Awesome 图标的名字。而 enable 可用于控制是否显示图标，你可以设置成 false 来去掉图标。 注意 在菜单图标开启的情况下，如果菜单项与菜单未匹配（没有设置或者无效的 Font Awesome 图标名字） 的情况下，NexT将会使用?作为图标。 注意键值（如home）的大小写要严格匹配 设置侧栏 默认情况下，侧栏仅在文章页面（拥有目录列表）时才显示，并放置于右侧位置。 可以通过修改 主题配置文件 中的sidebar 字段来控制侧栏的行为。侧栏的设置包括两个部分，其一是侧栏的位置; 其二是侧栏显示的时机。 侧栏位置 编辑主题配置文件,通过修改sidebar字段中的sidebar.position 的值来设置侧栏的位置，可选值有： left - 靠左放置 right - 靠右放置 不同的Scheme值对应的页面中的侧栏显示效果不一样 侧栏显示时机 编辑主题配置文件,通过修改sidebar字段中的sidebar.display的值来设置侧栏显示的时机，可选值有： post - 默认行为，在文章页面（拥有目录列表）时显示 always - 在所有页面中都显示 hide - 在所有页面中都隐藏（可以手动展开） remove - 完全移除 设置头像 编辑主题配置文件,通过修改avatar字段的值(头像的链接地址)来设置图像，其中可选的值有： 自测发现该设置不生效，可直接将主题目录下的sources/images/目录中的avatar.gif替换成自己想设置的图像即可，注意目测是只识别gif格式 设置作者昵称 编辑站点配置文件,设置author字段的值为你的昵称。 设置站点描述 编辑站点配置文件,设置description字段的值为你的站点描述。站点描述可以是你喜欢的一句签名 个性化定制主题配置设置RSS 编辑主题配置文件，通过设定rss字段的值来设置RSS.为满足特定的使用场景，NexT中RSS有三个可用选项： false：禁用 RSS，不在页面上显示RSS连接 留空：使用Hexo生成的Feed链接.需要先安装 hexo-generator-feed插件。 具体的链接地址：适用于已经烧制过 Feed 的情形 搜索插件 在插件社区1或插件社区2中搜索上述插件，点击进去，里面都有详细的安装和配置指南 安装插件 在根目录下打开终端，输入命令$ npm install hexo-generator-feed --save 配置 编辑主题配置文件,设定RSS字段，添加feed字段 添加标签页面 新建「标签」页面，并在菜单中显示「标签」链接。「标签」页面将展示站点的所有标签，若你的所有文章都未包含标签，此页面将是空的。 新建页面 在根目录下打开终端，输入hexo new page命令新建一个页面，命名为tags： 设置页面类型 编辑刚新建的页面，在front-matter区域添加type字段，值设置为tags ，主题将自动为这个页面显示标签云。页面内容如下： 修改菜单 在菜单中添加链接。编辑主题配置文件 ，添加tags到 menu字段中，如下: 注意 如果有启用多说或者 Disqus评论，页面也会带有评论。若需要关闭的话，在front-matter区域添加字段comments并将值设置为false，如： 添加分类页面 新建「分类」页面，并在菜单中显示「分类」链接。「分类」页面将展示站点的所有分类，若你的所有文章都未包含分类，此页面将是空的 新建页面 在根目录下打开终端，输入hexo new page命令新建一个页面，命名为categories： 设置页面类型 编辑刚新建的页面，在front-matter区域添加type字段，值设置为categories ，主题将自动为这个页面显示分类。页面内容如下： 修改菜单 在菜单中添加链接。编辑主题配置文件 ，添加categories到 menu字段中，如下: 注意 1.如果有启用多说或者 Disqus评论，页面也会带有评论。若需要关闭的话，在front-matter区域添加字段comments并将值设置为false，如： 2.分类页面的排版遵循规则：不同级别的名称按照博文front-matter区域中categories字段指定的从上到下的顺序依次层次化显示；同级别的名称安装其名称首字母在ASCII表中的位置从上到下依次显示。如下： 设置字体 注意：此特性在版本5.0.1中引入，要使用此功能请确保所使用的 NexT 版本在此之后 为了解决Google Fonts API不稳定的问题，NexT 在 5.0.1 中引入此特性。 通过此特性，你可以指定所使用的字体库外链地址；与此同时，NexT 开放了 5 个特定范围的字体设定，他们是： 全局字体：定义的字体将在全站范围使用 标题字体：文章内标题的字体（h1, h2, h3, h4, h5, h6） 文章字体：文章所使用的字体 Logo字体：Logo 所使用的字体 代码字体： 代码块所使用的字体 各项所指定的字体将作为首选字体，当他们不可用时会自动 Fallback 到NexT设定的基础字体组： 非代码类字体：Fallback到 &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, sans-serif 代码类字体：Fallback 到consolas, Menlo, &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, monospace 另外，每一项都有一个额外的 external属性，此属性用来控制是否使用外链字体库。 开放此属性方便你设定那些已经安装在系统中的字体，减少不必要的请求（请求大小） 设置代码高亮主题 NexT使用 Tomorrow Theme 作为代码高亮，共有5款主题供你选择。NexT默认使用的是白色的normal主题，可选的值有 normal，night， night blue， night bright， night eighties： 编辑主题配置文件，更改highlight_theme字段的值，如： 侧边栏社交链接 侧栏社交链接的修改包含两个部分，第一是链接，第二是链接图标。两者配置均在主题配置文件中 配置链接 编辑主题配置文件，修改social字段的值，其键值格式是：显示文本:链接地址 配置链接图标 编辑主题配置文件，修改social_icons字段的值，格式是匹配键: Font Awesome 图标名称，匹配键与上一步所配置的链接的显示文本相同（大小写严格匹配），图标名称是Font Awesome图标的名字（不必带 fa- 前缀）。enable选项用于控制是否显示图标，你可以设置成false来去掉图标。 开启打赏功能 可参考habren进行设置 编辑主题配置文件,添加如下内容： 图片放在theme/next/souce/images/下 设置友情链接 可参考iamwent 进行配置 编辑主题配置文件,添加如下内容： 多说评论显示UA 可参考Doublemine进行配置 编辑主题配置文件，修改duoshuo_info字段；设置ua_enable为true即可显示 UA信息。admin_enable是用于显示 「博主」 文字，表明评论者是博主,此字段需要同时配置 user_id 和 admin_nickname 字段。请访问多说，登录并访问「我的主页」获取user_id，此ID是网址最后那串数字。设置如下: 腾讯公益404页面站点建立时间订阅微信公众号设置动画效果第三方服务评论系统多说DisqusFacebook CommentsHyperComments网易云跟帖来必力数据统计与分析百度统计Google分析腾讯分析CNZZ统计不蒜子统计腾讯移动分析内容分享服务JiaThis百度分享多说分享AddThis搜索服务Swiftype微搜索Local Search 添加百度/谷歌/本地 自定义站点内容搜索 安装插件 在根目录下打开终端，执行下列命令npm install hexo-generator-searchdb --save 编辑配置文件1、编辑站点配置文件，添加如下内容： 2、编辑主题配置文件，启动本地搜索功能 Algolia其他服务MathJaxFacebook SDKGoogle Webmaster tools多说热评文章内建标签文本居中的引用使用方式效果示例突破容器宽度限制的图片使用方式效果示例Bootstrap Callout使用方式效果示例进阶设定设置JavaScipt第三方库其他常见问题如何设置「阅读全文」Favicon 设置后没有生效如何更改字体为何新增的菜单项显示 Menu.xxx标签/分类数量统计不准确如何关闭新建页面的评论功能如何设置页面文章的篇数如何优化 NexT 主题Cannot find module XXX其他平台 这里包含 NexT在其他平台的实现版本 Farbox Farbox-NexT]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[静态站点生成框架之Hexo详解]]></title>
      <url>%2F2017%2F03%2F21%2FHexo%E8%AF%A6%E8%A7%A3%2F</url>
      <content type="text"><![CDATA[参考文档 Hexo官方文档 开始使用概述 欢迎使用 Hexo，本文档将帮助您快速上手。如果您在使用过程中遇到问题，请查看问题解答 中的解答，或者在GitHub、Google Group 上提问。 什么是hexo? Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页 安装 安装 Hexo 相当简单。然而在安装前，您必须检查电脑中是否已安装下列应用程序： Node.js Git 安装Git Windows：下载并安装 git；或者快速下载安装包进行安装 Mac：使用 Homebrew, MacPorts ：brew install git;或下载安装程序 安装 Linux (Ubuntu, Debian)：sudo apt-get install git-core Linux (Fedora, Red Hat, CentOS)：sudo yum install git-core 详细的git使用方法可参考git教程 安装Node.js使用nvm–最佳的安装方式 curl命令安装nvm: $ curl https://raw.github.com/creationix/nvm/master/install.sh | sh Wget命令安装nvm: $ wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh 安装完成后，重启终端并执行下列命令即可安装 Node.js。 $ nvm install stable Windows 用户 对于windows用户来说，建议使用安装程序进行安装。安装时，请勾选 Add to PATH 选项。 另外，您也可以使用 Git Bash 这是git for windows自带的一组程序，提供了Linux风格的shell，在该环境下，您可以直接用上面提到的命令来安装Node.js。打开它的方法很简单，在任意位置单击右键，选择“Git Bash Here”即可 也可以使用Cmder控制台直接用上面提到的命令来安装Node.js。它的使用方法请见Cmder教程 由于Hexo的很多操作都涉及到命令行，您可以考虑始终使用Git Bash或者Cmder控制台来进行操作。但是建议使用Cmder控制台，因为它的速度较快，效率较高 下载安装程序来安装安装Hexo 所有必备的应用程序安装完成后，即可使用npm命令安装 Hexo。 $ npm install -g hexo-cli 详细的npm使用方法请见npm教程 Hexo命令指令init$ hexo init [folder] 新建一个网站。如果没有设置folder ，Hexo 默认在当前的文件夹建立网站。 new$ hexo new [layout] &lt;title&gt; 新建一篇文章。如果没有设置 layout(post、page、draft) 的话，默认使用 _config.yml 中的 default_layout 参数代替。如果标题包含空格的话，请使用引号括起来。 generate$ hexo generate $ hexo g(简写版) 生成静态站点文件 publish$ hexo publish [layout] &lt;filename&gt; 发表草稿 server$ hexo server $ hexo s(简写版) 启动服务器。默认情况下，访问网址为：http://localhost:4000/ deploy$ hexo deploy $ hexo d(简写版) 上传到远程仓库部署网站 render$ hexo render &lt;file1&gt; [file2] ... 渲染文件 migrate$ hexo migrate &lt;type&gt; 从其他博客系统迁移内容 clean$ hexo clean 清除缓存文件 (db.json) 和已生成的静态文件 (public) 注意：在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。 list$ hexo list &lt;type&gt; 列出网站资料 version$ hexo version 显示 Hexo 版本 选项安全模式$ hexo --safe 在安全模式下，不会载入插件和脚本。当您在安装新插件遭遇问题时，可以尝试以安全模式重新执行 调试模式$ hexo --debug 在终端中显示调试信息并记录到 debug.log。当您碰到问题时，可以尝试用调试模式重新执行一次，并提交调试信息到 GitHub 简洁模式$ hexo --silent 隐藏终端信息 自定义配置文件的路径$ hexo --config custom.yml 自定义配置文件的路径，执行后将不再使用_config.yml 显示草稿$ hexo --draft 显示 source/_drafts 文件夹中的草稿文章 自定义 CWD$ hexo --cwd /path/to/cwd 自定义当前工作目录（Current working directory）的路径。 Hexo框架的目录结构 安装 Hexo 完成后，先新建一个文件夹，作为存放博客网站所需要的仓库，然后使用下列git命令初始化仓库,以便于版本控制该仓库 git init 然后执行下列hexo命令，Hexo将会在指定文件夹中新建所需要的文件。 $ hexo init &lt;folder&gt;-----初始化博客框架到指定folder目录下，该目录为博客网站的根目录 $ cd &lt;folder&gt;------------切换到博客网站根目录 $ npm install------------安装软件依赖包 执行完hexo init命令后，指定folder文件夹(根目录)下的目录结构如下：. ├── _config.yml ├── package.json |—— db.json ├── scaffolds ├── source | ├── _drafts | └── _posts └── themes _config.yml文件 该文件保存网站的配置 信息，您可以在此配置大部分的参数。 package.json文件 该文件保存着已安装应用程序的信息。EJS, Stylus 和 Markdown renderer 已默认安装，您可以自由移除。 package.json { &quot;name&quot;: &quot;hexo-site&quot;, &quot;version&quot;: &quot;0.0.0&quot;, &quot;private&quot;: true, &quot;hexo&quot;: { &quot;version&quot;: &quot;&quot; }, &quot;dependencies&quot;: { &quot;hexo&quot;: &quot;^3.0.0&quot;, &quot;hexo-generator-archive&quot;: &quot;^0.1.0&quot;, &quot;hexo-generator-category&quot;: &quot;^0.1.0&quot;, &quot;hexo-generator-index&quot;: &quot;^0.1.0&quot;, &quot;hexo-generator-tag&quot;: &quot;^0.1.0&quot;, &quot;hexo-renderer-ejs&quot;: &quot;^0.1.0&quot;, &quot;hexo-renderer-stylus&quot;: &quot;^0.2.0&quot;, &quot;hexo-renderer-marked&quot;: &quot;^0.2.4&quot;, &quot;hexo-server&quot;: &quot;^0.1.2&quot; } } db.json文件 该文件是缓存文件（缓存编写的md文件内容等） scaffolds目录 该目录存放着博文模版 。当您新建文章时，Hexo 会根据 scaffold 来建立文件。 Hexo的模板是指在新建的markdown文件中默认填充的内容。例如，如果您修改caffold/post.md中的Front-matter内容，那么每次新建一篇文章时都会包含这个修改。 source目录 source资源文件夹是存放用户源资源的地方。除 _posts 、_drafts文件夹之外，开头命名为_ (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。source目录下的Markdown 和HTML文件会被hexo g解析并放到在根目录下新建的 public 文件夹，而其他文件会被拷贝过去。也可以将此目录理解为类似于git的工作区workpace . ├── _drafts--------使用hexo new draft &quot;folder&quot;命令生成 ├── _posts---------使用hexo new [post] &quot;folder&quot;命令生成,默认是post ├── about----------使用hexo new page &quot;folder&quot;命令生成 ├── categories-----使用hexo new page &quot;folder&quot;命令生成 └── tags-----------使用hexo new page &quot;folder&quot;命令生成 themes目录 该目录存放主题文件夹。Hexo 会根据主题来生成静态页面。 在主题目录下有一个_config.yml配置文件，该文件是用来配置网站页面主题的相关信息 执行完hexo generate命令后，指定folder文件夹(根目录)下的目录结构如下：. ├── _config.yml ├── package.json |—— db.json ├── scaffolds ├── source | ├── _drafts | └── _posts └── themes |__ public public目录 该目录保存使用hexo generate命令解析source目录得到的站点文件；也可以将该目录理解为类似于git的暂存区stage。此解析过程如下： 根据根目录下的_config.yml配置文件解析根目录下的source目录中的所有内容；git来做版本控制。根据theme/ThemeName/下的_config.yml配置文件解析该目录下的source目录中的所有内容；git来做版本控制。 执行完hexo deploy命令后，指定folder文件夹(根目录)下的目录结构如下：. ├── _config.yml ├── package.json |—— db.json ├── scaffolds ├── source | ├── _drafts | └── _posts └── themes |__ public |__ .deploy_git .deploy_git目录 该目录保存hexo deploy命令上传到远程仓库中的文件内容，即将远程仓库中的全部文件内容备份在本地，类似于git的本地仓库。 配置根目录下的_config.yml文件配置该配置文件是用来配置网站的整体信息 网站配置 其中，description主要用于SEO，告诉搜索引擎一个关于您站点的简单描述，通常建议在其中包含您网站的关键词。 网址配置 网站存放在子目录如果您的网站存放在子目录中，例如 http://yoursite.com/blog，则请将您的 url 设为 http://yoursite.com/blog 并把 root 设为 /blog/。 目录配置 详细的的globbing通配机制请见：globbing详解 文章配置 默认情况下，Hexo生成的超链接都是绝对地址。例如，如果您的网站域名为example.com,您有一篇文章名为hello，那么绝对链接可能像这样：http://example.com/hello.html，它是绝对于域名的。相对链接像这样：/hello.html，也就是说，无论用什么域名访问该站点，都没有关系，这在进行反向代理时可能用到。通常情况下，建议使用绝对地址。 启动Asset文件夹资源（Asset）代表source 文件夹中除了文章以外的所有文件，例如图片、CSS、JS 文件等。比方说，如果你的Hexo项目中只有少量图片，那最简单的方法就是将它们放在source/images文件夹中。然后通过类似于 ![](/images/image.jpg) 的方法访问它们。下面会详细介绍 分类 &amp; 标签配置 日期/时间格式配置 Hexo 使用Moment.js 来解析和显示时间。 分页配置 扩展配置 主题目录下_config.yml文件配置该配置文件主要是用来配置根目录下`_config.yml`配置文件中的theme参数。实现自定义网页主题 yelee主题 NexT主题 迁移RSS 首先，安装hexo-migrator-rss 插件 $ npm install hexo-migrator-rss --save 插件安装完成后，执行下列命令，从 RSS 迁移所有文章。source 可以是文件路径或网址。 $ hexo migrate rss &lt;source&gt; Jekyll 把 _posts 文件夹内的所有文件复制到 source/_posts 文件夹，并在_config.yml中修改 new_post_name 参数。 new_post_name: :year-:month-:day-:title.md Octopress 把Octopress source/_posts文件夹内的所有文件转移到 Hexo 的source/_posts文件夹，并修改 _config.yml 中的 new_post_name参数。 new_post_name: :year-:month-:day-:title.md WordPress 首先，安装 hexo-migrator-wordpress插件。 $ npm install hexo-migrator-wordpress --save 在 WordPress 仪表盘中导出数据(“Tools” → “Export” → “WordPress”)（详情参考WP支持页面）。 插件安装完成后，执行下列命令来迁移所有文章。source可以是 WordPress 导出的文件路径或网址。 $ hexo migrate wordpress &lt;source&gt; 注意这个插件并不能完美地实现WordPress-&gt;Hexo的数据转换，尤其是在处理WordPress的分类方面存在问题（见Front-matter中的分类与标签）。因此，建议您在迁移完成后，手工审阅所有生成的markdown文件，检查其中是否有错误。对于文章数量较大的WordPress站点，这项工作可能要花很长的时间。 Joomla 首先，安装 hexo-migrator-joomla 插件。 $ npm install hexo-migrator-joomla --save 使用 J2XML 组件导出 Joomla 文章。 插件安装完成后，执行下列命令来迁移所有文章。source可以是 Joomla 导出的文件路径或网址。 $ hexo migrate joomla &lt;source&gt; 基本操作文档生成 执行下列命令来创建一篇新文章 $ hexo new [layout] &lt;title&gt; 布局（Layout） hexo通过layout来指定文章的布局，layout有三个值：post、page、draft。当命令中不带layout时，可以通过修改 _config.yml 中的 default_layout 参数值来指定默认布局，默认是post 1.指定不同的面页布局模式，其生成的文件分别存放在不同的路径下，如下： 2.指定不同的面页布局模式，hexo会根据 scaffolds 文件夹内相对应的文件的Front-matter区域来建立文件(按照模板初始化文件) 布局 对应模板文件 post scaffolds/post.md page scaffolds/page.md draft scaffolds/draft.md 2.1 模板中可使用的参数变量(Front-matter区域)如下： 上述参数变量所在的区域文件最上方以---分隔的区域,也叫做Front-matter，用来指定文章显示的相关属性 2.2 分类和标签 只有文章支持分类和标签，您可以在 Front-matter中设置。在其他系统中，分类和标签听起来很接近，但是在 Hexo 中两者有着明显的差别：分类具有顺序性和层次性，也就是说 Foo, Bar 不等于 Bar, Foo；而标签没有顺序和层次。 categories: - Diary tags: - PS3 - Games 分类方法的分歧如果您有过使用WordPress的经验，就很容易误解Hexo的分类方式。WordPress支持对一篇文章设置多个分类，而且这些分类可以是同级的，也可以是父子分类。但是Hexo不支持指定多个同级分类。下面的指定方法： categories: Diary Life 会使分类Life成为Diary的子分类，而不是并列分类。因此，有必要为您的文章选择尽可能准确的分类。 2.3 JSON Front-matter 除了 YAML模式外，Front-matter区域也可以使用 JSON模式 来编写，只要将 --- 代换成 ;;; 即可。 &quot;title&quot;: &quot;Hello World&quot;, &quot;date&quot;: &quot;2013/7/13 20:46:25&quot; ;;; 不要处理我的文章如果你不想你的文章被处理，你可以将 Front-Matter中的layout: 设为 false 。 文件名称(title) Hexo 默认以标题做为文件名称，但您可编辑 _config.yml 中的new_post_name 参数来改变默认的文件名称，举例来说，设为:year-:month-:day-:title.md 可让您更方便的通过日期来管理文章 草稿(draft) 刚刚提到了 Hexo 的一种特殊布局：draft，该布局在建立时会被保存到 source/_drafts 文件夹，不会显示在页面中，可在执行时加上 --draft 参数，或是把 _config.yml 中的render_drafts 参数设为 true 来预览草稿 $ hexo new draft &lt;title&gt; --draft 也可通过 publish 命令将草稿移动到 source/_posts 文件夹中预览草稿，该命令的使用方式与 new 十分类似，您也可在命令中指定 layout 来指定布局。 $ hexo publish [layout] &lt;title&gt; 编辑文档Markdown语法 详细的Markdown语法使用请见Markdown语法 标签插件（Tag Plugins） 标签插件和 Front-matter 中的标签不同，它们是用于在文章中快速插入特定形式内容的插件,而后者只是用来指定文章显示的相关属性 使用插件标签之前需要使用npm install命令安装对应插件1或对应插件2 已安装的插件信息也可以在package.json文件中查看 双标签引用块 在文章中插入引言，可包含作者、来源和标题。 {% blockquote [author[, source]] [link] [source_link_title] %} content {% endblockquote %} 1.没有提供参数，则只输出普通的 blockquote {% blockquote %} Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem. {% endblockquote %} Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem. 2.引用书上的句子 Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy. David LevithanWide Awake Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy. David Levithan——Wide Awake 3.引用 Twitter NEW: DevDocs now comes with syntax highlighting. http://devdocs.io @DevDocstwitter.com/devdocs/status/356095192085962752 NEW: DevDocs now comes with syntax highlighting. http://devdocs.io @DevDocs——twitter.com/devdocs/status/356095192085962752 4.引用网络上的文章 Every interaction is both precious and an opportunity to delight. Seth GodinWelcome to Island Marketing Every interaction is both precious and an opportunity to delight. Seth Godin——Welcome to Island Marketing 代码块 在文章中插入代码 形式一： {% codeblock [title] [lang:language] [url] [link text] %} code snippet {% endcodeblock %} 形式二： ``` [language] [title] [url] [link text] code snippet ``` 1.普通的代码块 1alert(&apos;Hello World!&apos;); alert(&#39;Hello World!&#39;); 2.指定语言3.附加说明4.附加说明和网址 Pull Quote 在文章中插入 Pull quote。 {% pullquote [class] %} content {% endpullquote %} Raw 如果您想在文章中插入Swig 标签，可以尝试使用 Raw 标签，以免发生解析异常。 {% raw %} content {% endraw %} 单标签jsFiddle 在文章中嵌入 jsFiddle。 {% jsfiddle shorttag [tabs] [skin] [width] [height] %} Gist 在文章中嵌入 Gist。 {% gist gist_id [filename] %} iframe 在文章中插入 iframe。 {% iframe url [width] [height] %} Image 在文章中插入指定大小的图片。 {% img [class names] /path/to/image [width] [height] [title text [alt text]] %} Link 在文章中插入链接，并自动给外部链接添加 target=”_blank” 属性。 {% link text url [external] [title] %} Include Code 插入 source文件夹内的代码文件。 {% include_code [title] [lang:language] path/to/file %} Youtube 在文章中插入 Youtube 视频。 {% youtube video_id %} Vimeo 在文章中插入 Vimeo 视频。 {% vimeo video_id %} 引用文章 引用其他文章的链接。 {% post_path slug %} {% post_link slug [title] %} 引用资源 引用文章的资源。 {% asset_path slug %} {% asset_img slug [title] %} {% asset_link slug [title] %} 资源文件夹 资源（Asset）文件夹代表 source 文件夹中除了文章以外的所有文件，例如图片、CSS、JS 文件等。具体的使用方法如下： 简单化管理较少资源 例如：Hexo项目中只有少量图片，那最简单的方法就是将它们放在 source/images 文件夹中。然后通过类似于 ![](/images/image.jpg)的方法访问它们。 组织化管理较多资源 该方法可以有规律地提供图片和其他资源以及想要将他们的资源分布在各个文章上 1.将config.yml文件中的post_asset_folder选项设为true来打开。 _config.yml post_asset_folder: true 当资源文件管理功能打开后，Hexo将会在你每一次通过 hexo new [layout] 命令创建新文章时自动创建一个文件夹到相同目录下。这个资源文件夹将会有与这个 markdown 文件一样的名字。将所有与你的文章有关的资源放在这个关联文件夹中之后，你可以通过相对路径来引用它们，这样你就得到了一个更简单而且方便得多的工作流。 2.将要引用的资源放到上述生成的资源文件夹中3.使用相对路径引用资源 方法一：通过常规的 markdown 语法和相对路径来引用图片和其它资源 ![](/example.jpg) 方法二：使用插件标签和相对路径来引用图片和其它资源 使用npm install命令安装对应插件1或对应插件2 $npm install hexo-asset-image 使用对应的插件标签和相对路径进行引用 {% asset_path slug %} {% asset_img slug [title] %} {% asset_link slug [title] %} 例如：{% asset_img example.jpg This is an example image %} 数据文件夹 有时您可能需要在主题中使用某些资料，而这些资料并不在文章内，并且是需要重复使用的，那么您可以考虑使用 Hexo 3.0 新增的「数据文件」功能。此功能会载入source/_data内的YAML或JSON 文件，如此一来您便能在网站中复用这些文件了。 举例来说，在 source/_data 文件夹中新建 menu.yml 文件： Home: / Gallery: /gallery/ Archives: /archives/ 您就能在模板中使用这些资料： {% for link in site.data.menu %} {{ loop.key }} {% endfor %} 生成静态文件 hexo使用下列命令快速且简单地生成静态文件 $ hexo generate 监视文件变动 Hexo 能够监视文件变动并立即重新生成静态文件，在生成时会比对文件的 SHA1 checksum，只有变动的文件才会写入。 $ hexo generate --watch 完成后部署 执行下列的其中一个命令，可以让Hexo在生成完毕后自动上传部署网站，两个命令的作用是相同的。 $ hexo generate --deploy $ hexo deploy --generate 简写上面两个命令可以简写为 $ hexo g -d $ hexo d -g 开启本地服务器预览Hexo服务器 Hexo 3.0 把服务器独立成了个别模块，您必须先安装hexo-server才能使用。具体使用方法如下： 安装hexo-server$ npm install hexo-server --save 启动服务器$ hexo server 本地预览静态网页 网站会在http://localhost:4000 下启动,在浏览器中输入上述链接可直接预览。在服务器启动期间，Hexo 会监视文件变动并自动更新，无须重启服务器。 如果您想要更改端口，或是在执行时遇到了 EADDRINUSE 错误，可以在执行时使用 -p选项指定其他端口，如下： $ hexo server -p 5000 命令可用选项静态模式 在静态模式下，服务器只处理 public 文件夹内的文件，而不会处理文件变动，在执行时，您应该先自行执行 hexo generate，此模式通常用于生产环境（production mode）下。 $ hexo server -s 自定义IP 服务器默认运行在 0.0.0.0，您可以覆盖默认的 IP 设置，如下： $ hexo server -i 192.168.1.1 指定这个参数后，您就只能通过该IP才能访问站点。例如，对于一台使用无线网络的笔记本电脑，除了指向本机的127.0.0.1外，通常还有一个192.168.*.*的局域网IP，如果像上面那样使用-i参数，就不能用127.0.0.1来访问站点了。对于有公网IP的主机，如果您指定一个局域网IP作为-i参数的值，那么就无法通过公网来访问站点。 Pow服务器 Pow 是一个 Mac 系统上的零配置 Rack 服务器，它也可以作为一个简单易用的静态文件服务器来使用。 安装pow服务器$ curl get.pow.cx | sh 设置启动服务器 在 ~/.pow文件夹建立链接（symlink）。 $ cd ~/.pow $ ln -s /path/to/myapp 本地预览静态网页 开启服务器后生成的静态网站将会在 http://myapp.dev下运行，网址根据链接名称而定 上传部署静态文件 Hexo 提供了快速方便的一键部署功能，让您只需一条命令hexo deploy就能将网站部署到远程服务器上；不同部署工具的部署配置各不相同，实际情况如下： Git 1.安装hexo-deployer-git插件 $ npm install hexo-deployer-git --save 2.编辑主配置文件_config.yml中的deploy项 deploy: type: git repo: &lt;repository url&gt; branch: [branch--master主分支] message: [message] 3.一键部署 $ hexo deploy Heroku 1.安装hexo-deployer-heroku插件 $ npm install hexo-deployer-heroku --save 2.编辑主配置文件_config.yml中的deploy项 deploy: type: heroku repo: &lt;repository url&gt; message: [message] 3.一键部署 $ hexo deploy Rsync 1.安装hexo-deployer-rsync插件 $ npm install hexo-deployer-rsync --save 2.编辑主配置文件_config.yml中的deploy项 deploy: type: rsync host: &lt;host&gt; user: &lt;user&gt; root: &lt;root&gt; port: [port] delete: [true|false] verbose: [true|false] ignore_errors: [true|false] rsync部署模块的工作方式需要注意的是，要求您提供的实际上是一个能通过SSH登陆远程主机的Linux用户。Hexo会自动处理关于rsync使用的一切操作。因此，您需要在远程主机上为您的Hexo站点建立一个用户，并允许其通过SSH登陆。不过，这里的port，的确是指rsync监听的端口，请确保防火墙打开了该端口。 3.一键部署 $ hexo deploy OpenShift 1.安装hexo-deployer-openshift插件 $ npm install hexo-deployer-openshift --save 2.编辑主配置文件_config.yml中的deploy项 deploy: type: openshift repo: &lt;repository url&gt; message: [message] 3.一键部署 $ hexo deploy FTPSync 1.安装hexo-deployer-ftpsync插件 $ npm install hexo-deployer-ftpsync --save 2.编辑主配置文件_config.yml中的deploy项 deploy: type: ftpsync host: &lt;host&gt; user: &lt;user&gt; pass: &lt;password&gt; remote: [remote] port: [port] ignore: [ignore] connections: [connections] verbose: [true|false] FTP部署可能出现的问题您可能需要预先通过其他方式将所有文件上传到远程主机中。否则初次使用ftpsync插件就可能出现报错。另外，由于FTP协议的特征，它每传送一个文件就需要一次握手，相对速度较慢。 3.一键部署 $ hexo deploy 其他配置多个deployer 主配置文件_config.yml中的deploy项可以同时配置多个 deployer部署器，Hexo 会依照顺序执行每个 deployer。 deploy: - type: git repo: - type: heroku repo: 缩进YAML依靠缩进来确定元素间的从属关系。因此，请确保每个deployer的缩进长度相同，并且使用空格缩进。 其他部署方法 Hexo 生成的所有文件都放在public文件夹中，您可以将它们复制到您喜欢的地方。 自定义主题独自自建主题并发布创建Hexo主题 创建 Hexo 主题非常容易，您只要在themes文件夹内，新增一个任意名称的文件夹，并修改 _config.yml 内的 theme 设定，即可切换主题。一个主题可能会有以下的结构： . ├── _config.yml ├── languages ├── layout ├── scripts └── source config.yml文件 主题的配置文件。修改时会自动更新，无需重启服务器。 languages文件夹 若要让您的网站以不同语言呈现，您可使用国际化（internationalization）功能；具体实现方法如下： 1.先在_config.yml中调整 language 设定，这代表的是预设语言，您也可设定多个语言来调整预设语言的顺位,如下： language: zh-tw language: - zh-tw - en 2.编写语言文件 语言文件可以使用YAML 或 JSON编写，并放在主题文件夹中的 languages 文件夹。您可以在语言文件中使用 printf 格式 2.1 模板 在模板中，透过 __或_p 辅助函数，即可取得翻译后的字符串，前者用于一般使用；而后者用于复数字符串。例如： 2.2 指定语言识别方式 可在front-matter中指定该页面的语言，也可在 _config.yml中修改i18n_dir 设定，让 Hexo 自动侦测。 i18n_dir: :lang i18n_dir的预设值是:lang，也就是说 Hexo 会捕获网址中的第一段以检测语言，举例来说： /index.html =&gt; en /archives/index.html =&gt; en /zh-tw/index.html =&gt; zh-tw 捕获到的字符串唯有在语言文件存在的情况下，才会被当作是语言，因此例二/archives/index.html中的 archives就不被当成是语言。 layout文件夹 布局文件夹。用于存放主题的模板文件，决定了网站内容的呈现方式，Hexo 内建 Swig模板引擎，您可以另外安装插件来获得 EJS、Haml 或 Jade 支持，Hexo 根据模板文件的扩展名来决定所使用的模板引擎，例如： layout.ejs - 使用 EJS layout.swig - 使用 Swig 您可参考下面的模板简介以获得更多信息。 scripts文件夹 脚本文件夹。在启动时，Hexo 会载入此文件夹内的JavaScript 文件，请参见下面的插件介绍以获得更多信息。 source文件夹 资源文件夹，除了模板以外的 Asset，例如CSS、JavaScript 文件等，都应该放在这个文件夹中。文件或文件夹开头名称为_（下划线线）或隐藏的文件会被忽略。 如果文件可以被渲染的话，会经过解析然后储存到 public文件夹，否则会直接拷贝到 public 文件夹。 发布主题 当您完成主题后，可以考虑将它发布到 主题列表，让更多人能够使用您的主题。在发布前建议先进行 主题单元测试，确保每一项功能都能正常使用。发布主题的步骤和 更新文档 非常类似。 Fork hexojs/site 把库（repository）复制到电脑上，并安装所依赖的插件。 $ git clone https://github.com/&lt;username&gt;/site.git $ cd site $ npm install 编辑 source/_data/themes.yml，在文件中新增您的主题，例如： - name: landscape description: A brand new default theme for Hexo. link: https://github.com/hexojs/hexo-theme-landscape preview: http://hexo.io/hexo-theme-landscape tags: - official - responsive - widget - two_column - one_column 在source/themes/screenshots 新增同名的截图档案，图片必须为 800x500的 PNG 文件。 推送（push）分支。 建立一个新的合并申请（pull request）并描述改动。 定制其他主题并使用 NexT主题详解请见：Hexo主题之NexT yilia主题详解请见：Hexo主题之yilia 插件 Hexo 有强大的插件系统，使您能轻松扩展功能而不用修改核心模块的源码 插件的类型脚本（Scripts） 如果代码很简单，建议您编写脚本，您只需要把JavaScript 文件放到scripts文件夹，在启动时就会自动载入。 插件（Packages） 如果代码较复杂，或是您想要发布到NPM上，建议您编写插件。首先，在 node_modules文件夹中建立文件夹，文件夹名称开头必须为hexo-，如此一来Hexo才会在启动时载入,否则 Hexo将会忽略它。 插件的使用直接安装插件1.搜索自己想要的插件 插件社区1—官方插件库 插件社区2—npm社区插件库，有详细的安装配置说明 2.安装 $ npm install package 如果想深入了解npm软件包管理器的使用请见：软件包管理器之npm 自己编写插件1.在 node_modules文件夹中建立文件夹(文件夹名称开头必须为hexo-，如此一来Hexo才会在启动时载入否则 Hexo将会忽略它) 文件夹内至少要包含 2 个文件：一个是主程序;另一个是 package.json(描述插件的用途和所依赖的插件) . ├── index.js └── package.json package.json中至少要包含 name, version, main 属性，例如： 2.工具开发插件 可以使用 Hexo 提供的官方工具插件来加速开发： hexo-fs：文件 IO hexo-util：工具程式 hexo-i18n：本地化（i18n） hexo-pagination：生成分页资料 3.发布插件 当完成插件后，可以考虑将它发布到插件列表，让更多人能够使用您的插件。发布插件的步骤和更新文件非常类似。 Forkhexojs/site 把库（repository）复制到电脑上，并安装所依赖的插件 $ git clone https://github.com/&lt;username&gt;/site.git $ cd site $ npm install 编辑source/_data/plugins.yml，在档案中新增您的插件，例如： - name: hexo-server description: Server module for Hexo. link: https://github.com/hexojs/hexo-server tags: - official - server - console 推送（push）分支 建立一个新的合并申请（pull request）并描述改动 模板 模板决定了网站内容的呈现方式，每个主题至少都应包含一个 index模板，以下是各页面相对应的模板名称： 布局（Layout） 如果页面结构类似，例如两个模板都有页首（Header）和页脚（Footer），您可考虑通过「布局」让两个模板共享相同的结构。一个布局文件必须要能显示body 变量的内容，如此一来模板的内容才会被显示，举例来说： 生成 每个模板都默认使用 layout 布局，您可在 front-matter 指定其他布局，或是设为false 来关闭布局功能，您甚至可在布局中再使用其他布局来建立嵌套布局。 局部模版（Partial） 局部模板让您在不同模板之间共享相同的组件，例如页首（Header）、页脚（Footer）或侧边栏（Sidebar）等，可利用局部模板功能分割为个别文件，让维护更加便利。举例来说： 生成 您可以在局部模板中指定局部变量并使用 生成 优化 如果您的主题太过于复杂，或是需要生成的文件量太过于庞大，可能会大幅降低性能，除了简化主题外，您可以考虑 Hexo 2.7 新增的局部缓存（Fragment Caching） 功能。 本功能借鉴于 Ruby on Rails，它储存局部内容，下次便能直接使用缓存内容，可以减少文件夹查询并使生成速度更快。 它可用于页首、页脚、侧边栏等文件不常变动的位置，举例来说： 如果您使用局部模板的话，可以更简单： 但是，如果您开启了 relative_link 参数的话，请勿使用局部缓存功能，因为相对链接在每个页面可能不同。 永久链接（Permalinks） 自定义生成的静态网页所对应的永久链接（Permalinks）步骤如下： 1.编辑主配置文件_config.yml中的permalink_defaults和permalink项 1.1配置permalink项 1.2配置permalink_defaults项 在permalink_defaults 参数下调整永久链接中各变量的默认值： permalink_defaults: lang: en 2.编辑每篇文章的Front-matter部分 3.结合主配置文件_config.yml和Front-matter部分 生成永久链接示例1： 假设source/_posts文件夹中有个hello-world.md，它的Front-matter部分包含以下内容： title: Hello World date: 2013-07-14 17:01:34 categories: - foo - bar _config.yml文件不同的配置生成不同的永久链接，如下： 示例2： 若要建立一个多语种的网站，您可修改new_post_name 和permalink参数，如下： new_post_name: :lang/:title.md permalink: :lang/:title/ 当您建立新文章时，文章会被储存到： $ hexo new &quot;Hello World&quot; --lang tw # =&gt; source/_posts/tw/Hello-World.md 而网址会是： http://localhost:4000/tw/hello-world/ 变量全局变量 Lodash 函数库详见：Lodash函数库 网站变量 页面变量页面（page） Moment.js 对象详见：Moment.js对象 文章 (post) 和 page布局类似，但是添加了下列变量 首页（index） 归档 (archive) 与 index布局相同，但新增以下变量 分类 (category) 与 index 布局相同，但新增以下变量 标签 (tag) 与index 布局相同，但新增以下变量 其它辅助函数问题解答贡献]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[自建静态博客之Hexo&Github]]></title>
      <url>%2F2017%2F03%2F21%2FHexo-Github%2F</url>
      <content type="text"><![CDATA[参考博客 郭文奇的个人博客 基于 Hexo 的全自动博客构建部署系统 准备环境必备环境博客框架：hexoHexo is a fast, simple &amp; powerful blog framework. Hexo是一个极速、简单且强大的静态博客架构。它使用 Node.js 作为构建引擎，上百个文件在几秒钟内便可构建完成；而且拥有着丰富的插件库，因开源而显得生机勃勃，可扩展性很好；最重要的，它支持Markdown 作为书写语言，极大地方便了博客的撰写 详细的hexo的介绍与使用详见：自建静态博客之Hexo详解 版本控制工具：git 详细的Git的介绍与使用详见：版本控制(VCS)之Git详解 博客托管平台：github 详细的Github的介绍与使用详见：代码托管之Github详解 可选环境文本编辑器 sublime vim atom notepad++ 详细的sublime的介绍与使用详见：文本编辑器之Sublime详解 详细的vim的介绍与使用详见：文本编辑器之Vim详解 命令行工具(控制台) cmder(win下) git(全平台) bash(linux下) 总结：win平台上建议使用cmder;类Unix平台上建议使用git或者bash 详细的cmder的介绍与使用详见：Cmder详解 环境搭建本地仓库(blog)的搭建git的下载与配置下载 官网下载:git download–&gt;国内直接从官网下载比较困难，有时需要翻墙 国内下载：git for win 安装与使用 参考官方说明文档 参考廖雪峰的博客 参考相关pdf文档 配置–创建本地仓库新建仓库 在本地新建一个文件夹作为放置博客文件的仓库（名字和地方可以自由选择，当然最好不要放在中文路径下）。如：E:\anony 初始化仓库进入E:\anony，点击鼠标右键，选择Git Bash here 在命令提示符$后面输入命令：git init;初始化仓库 这时Git就把仓库建好了，而且告诉你是一个空的仓库（empty Git repository），可以发现当前目录下（即新建的本地仓库E:\anony）多了一个.git的文件夹，这个目录是Git来跟踪管理版本库的，没事千万不要手动修改这个目录里面的文件，否则就把Git仓库给破坏了。如果你没有看到.git文件夹，那是因为这个目录默认是隐藏的，用ls -ah命令就可以看见隐藏的.git文件夹 hexo的安装与配置 详细的hexo教程请详见：Hexo官方教程文档或自建静态博客之Hexo详解 下载并安装node.jsnode.js是Hexo 的构建引擎，所以安装hexo之前需要安装node.js 官网下载：node.js 在win上直接按照步骤安装（一直默认即可）。安装后可以使用命令：node -v进行查看是否安装成功 下载安装hexo由于官方并没有提供下载安装包，所有需要通过控制台(命令行工具)键入hexo命令进行下载安装 1. 使用git下载安装 在E:\anony目录下鼠标右键，选择Git Bash here 输入命令：npm install -g hexo-cli 查看hexo版本：hexo --version。验证是否安装成功 查看hexo命令的帮助文档：hexo 2.使用cmder下载安装 在E:\anony目录下鼠标右键，选择Cmder Here 输入命令：npm install -g hexo-cli 查看hexo版本：hexo --version。验证是否安装成功 查看hexo命令的帮助文档：hexo 配置Hexo注意： &gt;&gt;在之后提到的根目录就是hexo init命令后面指定的目录（此处是blog目录） &gt;&gt;在下面的演示过程中使用cmder控制台（git效率较低） 1.使用hexo init命令初始化生成博客框架 在E:\anony目录下鼠标右键，选择Cmder Here 输入命令：hexo init blog。初始化完成后会提示：INFO Start blogging with Hexo!。此时可以在根目录(E:\anony)下生成了一个blog文件夹，它是用来存放建立博客网站所需要的所有文件 2.cd到根目录(blog目录)下，在输入命令：npm install—安装依赖包 3.此时在anony目录下生成了一个blog目录，其内容如下 blog/ |- node_modules/ # hexo需要的模块，不需要上传GitHub |- themes/ # 主题文件，需要上传GitHub的dev分支 |- sources/ # 博文md文件，需要上传GitHub的dev分支 |- public/ # 生成的静态页面，由hexo deploy自动上传到gh-page分支 |- package.json # 记录hexo需要的包信息，不需要上传GitHub |- _config.yml # 全局配置文件，需要上传GitHub的dev分支 |- .gitignore # hexo生成默认的.gitignore，它已经配置好了不需要上传的hexo文件 访问本地仓库由于git的执行效率较低，所以下面使用cmder控制台进行演示 生成博客站点文件 在根目录目录下鼠标右键，选择Cmder Here(或者直接使用cd命令进行切换)，输入命令：hexo generate/hexo g.该命令会将source目录下的md文档根据配置文件生成博客网站内容 启动本地服务器根目录下输入命令：hexo server/hexo s 访问本地仓库(博客) 用浏览器访问http://localhost:4000/，此时，可以看到一个漂亮的博客首页，当然这个博客只是在本地的，别人是看不到的，hexo3.0使用的默认主题是landscape。（这是hexo的本地预览功能） 上传本地仓库(blog)到github 通过 hexo server搭建在本地的一个临时服务器，只有自己通过http://localhost:4000 才能访问到，如果想要把自己的博客发布的互联网上，需要利用一个服务器来部署你的博客。 github账号的注册与配置 详细的github教程请见：github教程 注册github账号 登录github官网（有时需要翻墙） 如果你已经有账号，那么点击右上角的sign in直接登录。 如果没有账号，依次输入昵称、邮箱、密码，然后点击Sign up for GitHub进行注册，按照默认的设置完成注册，最后还要进行邮件确认,我们登录到自己的注册邮箱中，会有一个github发来的邮件，点击即可。 建立远程仓库(repository) 登录第一步注册的github账号，点击Start a project，在Repository name下输入仓库名，记住仓库名必须是：username.github.io（username与注册的github账号名必须一致），其他的保持默认即可，然后点击Create repository，到这里，你在github上的的一个仓库就已经建立成功。 git的配置配置git名称和邮箱(与github的用户名和邮箱是一致的) hexo的配置 编辑_config.yml文件： 编辑E：\anony\blog下的_config.yml文件（建议使用Notepad++或者sublime）。在_config.yml文件的最下方，添加如下配置： 注意：username替换为你github的账号名称;hexo的配置文件中任何:后面都是带一个空格的，否则会报错 配置ssh key 此处可以参考Github官方文档配置ssh key 1.在根目录下鼠标右键，选择Cmder Here(或者直接使用cd命令进行切换)，输入以下命令 ssh-keygen -t rsa -C &quot;Github的注册邮箱地址&quot; 2.之后会要求确认路径和输入密码，我们这里使用默认的设置，一路回车就行，如果命令执行成功，会在C:\Users\Administrator目录下生成一个.ssh的文件夹（在打印信息中有提示） 3.进入.ssh文件夹，使用文本编辑器(sublime/notepad++)打开id_rsa.pub文件，复制全部内容（即生成的key）。 注意：千万不要使用Windows自带的记事本编辑任何文本文件。原因是Microsoft开发记事本的团队使用了一个非常弱智的行为来保存UTF-8编码的文件，他们自作聪明地在每个文件开头添加了0xefbbbf（十六进制）的字符，你会遇到很多不可思议的问题，比如，网页第一行可能会显示一个“?”，明明正确的程序一编译就报语法错误，等等，都是由记事本的弱智行为带来的。建议你下载Notepad++或者sublime代替记事本，不但功能强大，而且免费！Notepad++使用时需要将默认编码设置为UTF-8 without BOM 4.登录github账号，然后在页面右下角的Your repositories目录下，打开创建的仓库（username.github.io） ，点击右上角的settings，左边选中SSH and GPG keys，右边选择New SSH key，Title可随便填写，Key：粘贴上面复制的key（即id_rsa.pub文件的全部内容），然后点击Add SSH key。 5.之后会收到一封github官网发来的验证邮件，打开邮件链接进行确认即可。6.为了验证是否成功，输入以下命令 ssh -T git@github.com 如果是第一次，会提示是否continue，输入yes就会看到：You’ve successfully username, but GitHub does not provide shell access （username会显示为你的账号名称）这就表示已成功连上github 上传本地仓库1.安装hexo-deployer-git 插件 根据官方的文档显示，现在 Hexo 支持 Git、Heroku、Rsync、OpenShift、FTPSync 等部署方式，我们选择 Git 来部署的话，需要首先安装 hexo-deployer-git插件 在根目录下输入命令：npm install hexo-deployer-git --save 2.在根目录下依次输入下列命令 hexo generate(g) hexo deploy(d) 以上命令可以简写成：hexo g -d 3.如果上传成功，会显示INFO Deploy done: git，到此，就大功告成了，在浏览器中输入username.github.io（username替换为github的仓库名），就可以看到自己的博客了 基本操作撰写博文本地创建生成博文源文件hexo new 新建待提交博文–在根目录下输入下列命令 hexo new post &quot;filename&quot; 新建草稿博文—-在根目录下输入下列命令 hexo new draft &quot;filename&quot; 编辑博文源文件 使用markdownpad打开博文源文件 这是 post模板自动帮我生成的yaml文件头。其中 title是博文的标题，我们可以改成「你好！」；tags是博文的标签，我们可以加上「demo」、「hello」两个标签，从第 7 行开始我们就可以撰写博客的正文了。假设我写好的博客如下： 编辑配置文件 编辑_config.yml文件： 编辑E：\anony\blog下的_config.yml文件（建议使用Notepad++或者sublime） 本地预览 1.在根目录下一次输入下列命令 hexo ghexo s 2.然后用浏览器访问http://localhost:4000/ 上传部署 在根目录下键入下列命令 hexo g -d 如果上传成功，会显示INFO Deploy done: git，到此，就大功告成了，在浏览器中输入username.github.io（username替换为github的仓库名），就可以看到自己的博客了** 个性化配置 前面我们已经了解了Hexo 的安装使用和如何部署自己的博客到 Github，现在我们来自定义一下我们博客。配置文件有两个： 根目录的_config.yml(站点配置文件)：配置网站整体信息themes目录下各主题中的_config.yml(主题配置文件)：配置网站主题信息 站点配置文件使用sublime打开_config.yml Site 这一组配置是博客的描述，title和subtitle 分别是博客的站名和副标题，description 对搜索引擎收录博客会有帮助。language 一般可以选配 en 或者 zh-cn分别是英文和简体中文。 URL 这个部分需要修改的只有 url选项，如果想绑定自己购买的域名则将url改成自己的域名，否则就不需要改动此部分 Extensions 这一组配置是用来定义主题和配置插件的，可以看到，官方默认的主题叫做 landscape，就是天际地平线的主题。Hexo主题社区和Hexo插件社区非常非常的活跃，官方列表已经收录了 84 个制作精美的主题（字母升序排列，热度不分先后），每个主题都有很大的差别和不一样的特性，大家可以自行去列表中浏览、预览、选择自己喜欢的主题，总有一款适合你的胃口（没有就自己改😄）。例如，我现在选择 yelee主题 主题配置文件 每一个主题的详细配置参数都在/themes/themename/_config.yml 文件下，可以查阅该主题的官方页了解配置的解释;也可以根据_config.yml文件中的注释信息进行相关配置。 这里我们选择yelee主题做演示 想深度定制自己的yelee主题详见：Hexo主题之yelee 下载yelee主题 1.官网搜索主题 2.鼠标放在yelee上，右键，点击复制链接 3.翻墙下载或者git clone下载,在根目录下打开git bash或者cmder，输入一下命令 $git clone https://github.com/MOxFIVE/hexo-theme-yelee.git themes/yelee(使用https协议clone，有时被墙无法连接) $git clone git@github.com:MOxFIVE/hexo-theme-yelee.git themes/yelee(使用ssh协议clone，建议使用该方法，不担心由于被墙而无法连接) 安装yelee主题将下载好的主题文件夹放到themes/下相应目录中 修改配置文件将配置文件_config.yml中的theme选项值改为：yelee 主题更新$cd themes/yelee $git pull 预览主题 保存后，我们再次执行 hexo server命令，预览一下网站的变化 此时主题已经发生了巨大的改变，网站左侧现在显示的是 author 和 sutitle了，右边的预览页面支持很多动态特效。每一个主题的详细配置参数都在 /themes/yelee/_config.yml 文件下，可以查阅该主题的官方页了解配置的解释。当你选定了自己喜欢的主题，修改、配置好了之后。便可以使用、撰写、发布自己的博客了。 深度优化主题优化域名绑定DNS负载均衡Travis CI持续集成]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>%2F2017%2F03%2F21%2Fhello-world%2F</url>
      <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
    </entry>

    
  
  
</search>
