<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>HappyAnony的博客</title>
  <subtitle>Hacker界的小学生</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-03-24T03:26:00.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>(匿名者)Anony Golden</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>自建博客路线图</title>
    <link href="http://yoursite.com/2017/03/24/%E8%87%AA%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%B7%AF%E7%BA%BF%E5%9B%BE/"/>
    <id>http://yoursite.com/2017/03/24/自建博客路线图/</id>
    <published>2017-03-24T03:26:00.000Z</published>
    <updated>2017-03-24T03:26:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><strong>本路线图持续跟新中……………</strong></p>
</blockquote>
<ul>
<li><a id="more"></a>
</li>
</ul>
<h1 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h1><p><img src="自建博客.png" alt=""></p>
<h1 id="静态站点"><a href="#静态站点" class="headerlink" title="静态站点"></a>静态站点</h1><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><h3 id="必备环境"><a href="#必备环境" class="headerlink" title="必备环境"></a>必备环境</h3><h4 id="博客框架"><a href="#博客框架" class="headerlink" title="博客框架"></a>博客框架</h4><h5 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h5><h5 id="JeKyll"><a href="#JeKyll" class="headerlink" title="JeKyll"></a>JeKyll</h5><h4 id="托管平台"><a href="#托管平台" class="headerlink" title="托管平台"></a>托管平台</h4><h5 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h5><h5 id="Coding"><a href="#Coding" class="headerlink" title="Coding"></a>Coding</h5><h4 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h4><h5 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h5><h3 id="可选环境"><a href="#可选环境" class="headerlink" title="可选环境"></a>可选环境</h3><h4 id="文本编辑器"><a href="#文本编辑器" class="headerlink" title="文本编辑器"></a>文本编辑器</h4><h5 id="Subiime"><a href="#Subiime" class="headerlink" title="Subiime"></a>Subiime</h5><h5 id="Vim"><a href="#Vim" class="headerlink" title="Vim"></a>Vim</h5><h5 id="Atom"><a href="#Atom" class="headerlink" title="Atom"></a>Atom</h5><h5 id="Notepad"><a href="#Notepad" class="headerlink" title="Notepad++"></a>Notepad++</h5><h4 id="控制终端"><a href="#控制终端" class="headerlink" title="控制终端"></a>控制终端</h4><h5 id="Cmder"><a href="#Cmder" class="headerlink" title="Cmder"></a>Cmder</h5><h5 id="Bash"><a href="#Bash" class="headerlink" title="Bash"></a>Bash</h5><h5 id="Git-1"><a href="#Git-1" class="headerlink" title="Git"></a>Git</h5><h2 id="基本搭建"><a href="#基本搭建" class="headerlink" title="基本搭建"></a>基本搭建</h2><h3 id="Hexo-1"><a href="#Hexo-1" class="headerlink" title="Hexo"></a>Hexo</h3><h4 id="Hexo-Github"><a href="#Hexo-Github" class="headerlink" title="Hexo+Github"></a>Hexo+Github</h4><h4 id="Hexo-Coding"><a href="#Hexo-Coding" class="headerlink" title="Hexo+Coding"></a>Hexo+Coding</h4><h3 id="JeKyll-1"><a href="#JeKyll-1" class="headerlink" title="JeKyll"></a>JeKyll</h3><h2 id="主题优化"><a href="#主题优化" class="headerlink" title="主题优化"></a>主题优化</h2><h3 id="Hexo-2"><a href="#Hexo-2" class="headerlink" title="Hexo"></a>Hexo</h3><h4 id="NexT"><a href="#NexT" class="headerlink" title="NexT"></a>NexT</h4><h4 id="yilia"><a href="#yilia" class="headerlink" title="yilia"></a>yilia</h4><h4 id="yelee"><a href="#yelee" class="headerlink" title="yelee"></a>yelee</h4><h4 id="landscape"><a href="#landscape" class="headerlink" title="landscape"></a>landscape</h4><h3 id="JeKyll-2"><a href="#JeKyll-2" class="headerlink" title="JeKyll"></a>JeKyll</h3><h2 id="深度优化"><a href="#深度优化" class="headerlink" title="深度优化"></a>深度优化</h2><h1 id="动态站点"><a href="#动态站点" class="headerlink" title="动态站点"></a>动态站点</h1><h2 id="环境准备-1"><a href="#环境准备-1" class="headerlink" title="环境准备"></a>环境准备</h2><h2 id="基本搭建-1"><a href="#基本搭建-1" class="headerlink" title="基本搭建"></a>基本搭建</h2><h2 id="主题优化-1"><a href="#主题优化-1" class="headerlink" title="主题优化"></a>主题优化</h2><h2 id="深度优化-1"><a href="#深度优化-1" class="headerlink" title="深度优化"></a>深度优化</h2>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;本路线图持续跟新中……………&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
    
    </summary>
    
      <category term="1-Coder社区(RedArmy)" scheme="http://yoursite.com/categories/1-Coder%E7%A4%BE%E5%8C%BA-RedArmy/"/>
    
      <category term="2-虚实奇正" scheme="http://yoursite.com/categories/1-Coder%E7%A4%BE%E5%8C%BA-RedArmy/2-%E8%99%9A%E5%AE%9E%E5%A5%87%E6%AD%A3/"/>
    
      <category term="1-自建博客" scheme="http://yoursite.com/categories/1-Coder%E7%A4%BE%E5%8C%BA-RedArmy/2-%E8%99%9A%E5%AE%9E%E5%A5%87%E6%AD%A3/1-%E8%87%AA%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="1-路线图" scheme="http://yoursite.com/categories/1-Coder%E7%A4%BE%E5%8C%BA-RedArmy/2-%E8%99%9A%E5%AE%9E%E5%A5%87%E6%AD%A3/1-%E8%87%AA%E5%BB%BA%E5%8D%9A%E5%AE%A2/1-%E8%B7%AF%E7%BA%BF%E5%9B%BE/"/>
    
    
      <category term="自建博客" scheme="http://yoursite.com/tags/%E8%87%AA%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>Hexo主题之NexT</title>
    <link href="http://yoursite.com/2017/03/23/Hexo%E4%B8%BB%E9%A2%98%E4%B9%8BNexT/"/>
    <id>http://yoursite.com/2017/03/23/Hexo主题之NexT/</id>
    <published>2017-03-23T03:30:34.000Z</published>
    <updated>2017-03-23T03:30:34.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li><a id="more"></a>
</li>
</ul>
<h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><blockquote>
<p><a href="http://theme-next.iissnan.com/" target="_blank" rel="external">NexT官方使用文档</a></p>
</blockquote>
<h1 id="前言说明"><a href="#前言说明" class="headerlink" title="前言说明"></a>前言说明</h1><blockquote>
<p>在 <code>Hexo</code> 中有两份主要的配置文件，其名称都是<code>_config.yml</code>。 其中，一份位于站点根目录下，主要包含<code>Hexo</code>本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。</p>
<p>为了描述方便，在以下说明中，将前者称为<code>站点配置文件</code>， 后者称为 <code>主题配置文件</code>。</p>
<p>想体验其他Hexo主题请在<a href="https://hexo.io/themes/" target="_blank" rel="external">Hexo官方theme社区</a>中搜索</p>
</blockquote>
<h1 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h1><h2 id="安装NexT"><a href="#安装NexT" class="headerlink" title="安装NexT"></a>安装NexT</h2><blockquote>
<p>Hexo 安装主题的方式非常简单，只需要将主题文件拷贝至站点目录的 <code>themes</code>目录下， 然后修改下配置文件即可;安装步骤如下:</p>
</blockquote>
<h3 id="主题下载安装"><a href="#主题下载安装" class="headerlink" title="主题下载安装"></a>主题下载安装</h3><h4 id="git克隆"><a href="#git克隆" class="headerlink" title="git克隆"></a>git克隆</h4><blockquote>
<p>如果你熟悉<a href="http://git-scm.com/" target="_blank" rel="external">Git</a>， 建议你使用 <code>克隆最新版本</code> 的方式，之后的更新可以通过<code>git pull</code>来快速更新， 而不用再次下载压缩包替换。</p>
<p>想深入了解git的使用请见：<a href="">版本控制系统(VCS)之git</a>;也可以通过<a href="http://iissnan.com/progit" target="_blank" rel="external">《Pro Git》在线版本</a>这本书来学习</p>
</blockquote>
<h5 id="基于ssh协议-建议使用该方法，不担心被墙"><a href="#基于ssh协议-建议使用该方法，不担心被墙" class="headerlink" title="基于ssh协议(建议使用该方法，不担心被墙)"></a>基于ssh协议(建议使用该方法，不担心被墙)</h5><blockquote>
<p>在 Hexo 站点根目录下打开终端窗口。使用 Git checkout 代码：</p>
</blockquote>
<pre><code>$ cd your-hexo-site
$ git clone git@github.com:iissnan/hexo-theme-next.git themes/next
</code></pre><blockquote>
<p>上述的ssh链接可以在主题的github主界面上copy到：</p>
</blockquote>
<p><img src="1.png" alt=""></p>
<p><img src="2.png" alt=""></p>
<p><img src="6.png" alt=""></p>
<blockquote>
<p>主题更新</p>
</blockquote>
<pre><code>$cd themes/next
$git pull
</code></pre><h5 id="基于https协议-有时被墙无法连接"><a href="#基于https协议-有时被墙无法连接" class="headerlink" title="基于https协议(有时被墙无法连接)"></a>基于https协议(有时被墙无法连接)</h5><blockquote>
<p>在 Hexo 站点根目录下打开终端窗口。使用 Git checkout 代码：</p>
</blockquote>
<pre><code>$ cd your-hexo-site
$ git clone https://github.com/iissnan/hexo-theme-next themes/next
</code></pre><blockquote>
<p>上述的https链接可以在主题的github主界面上copy到：</p>
</blockquote>
<p><img src="3.png" alt=""></p>
<blockquote>
<p>主题更新</p>
</blockquote>
<pre><code>$cd themes/next
$git pull
</code></pre><h4 id="下载压缩包安装"><a href="#下载压缩包安装" class="headerlink" title="下载压缩包安装"></a>下载压缩包安装</h4><p><strong>1.前往NexT<a href="https://github.com/iissnan/hexo-theme-next/releases" target="_blank" rel="external">版本发布页面</a>或者NexT<a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="external">github主界面</a></strong><br><strong>2.选择你所需要的版本。<code>版本发布页面</code>下载<code>Download</code> 区域下的<code>Source Code (zip)</code>(类Unix系统下载tar.gz格式)到本地；<code>github主界面</code>下载<code>Clone and download</code>区域下的<code>Download Zip</code>到本地</strong></p>
<p><img src="5.png" alt=""></p>
<p><img src="4.png" alt=""></p>
<p><strong>3.解压所下载的压缩包至站点的 <code>themes</code>目录下， 并将 解压后的文件夹名称<code>hexo-theme-next-0.4.0</code>更改为 <code>next</code></strong></p>
<h3 id="启用主题"><a href="#启用主题" class="headerlink" title="启用主题"></a>启用主题</h3><blockquote>
<p>与所有 <code>Hexo</code>主题启用的模式一样。当克隆/下载完成后，打开<code>站点配置文件</code>，找到<code>theme</code>字段，并将其值更改为<code>next</code>。</p>
</blockquote>
<p><img src="7.png" alt=""></p>
<blockquote>
<p>到此，NexT 主题安装完成。下一步我们将验证主题是否正确启用。在切换主题之后、验证之前， 我们最好使用<code>hexo clean</code>来清除 Hexo 的缓存。</p>
</blockquote>
<h3 id="验证主题"><a href="#验证主题" class="headerlink" title="验证主题"></a>验证主题</h3><h4 id="解析生成静态文件"><a href="#解析生成静态文件" class="headerlink" title="解析生成静态文件"></a>解析生成静态文件</h4><pre><code>$hexo generate
</code></pre><h4 id="启动本地Hexo服务器"><a href="#启动本地Hexo服务器" class="headerlink" title="启动本地Hexo服务器"></a>启动本地Hexo服务器</h4><blockquote>
<p>可以开启<code>调试模式</code>（即加上 <code>--debug</code>）,命令如下</p>
</blockquote>
<pre><code>$hexo s --debug
</code></pre><blockquote>
<p>在服务启动的过程，注意观察命令行输出是否有任何异常信息，如果你碰到问题，这些信息将帮助他人更好的定位错误。 当命令行输出如下信息时表示服务成功启动，可以使用浏览器预览</p>
</blockquote>
<pre><code>INFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.
</code></pre><h4 id="本地浏览器预览"><a href="#本地浏览器预览" class="headerlink" title="本地浏览器预览"></a>本地浏览器预览</h4><blockquote>
<p>此时即可使用浏览器访问<code>http://localhost:4000</code>，检查站点是否正确运行.当你看到站点的外观与下图所示类似时即说明你已成功安装 <code>NexT</code>主题。这是<code>Nex</code>T 默认的 <code>Scheme —— Muse</code></p>
</blockquote>
<p><img src="8.png" alt=""></p>
<h2 id="主题设定"><a href="#主题设定" class="headerlink" title="主题设定"></a>主题设定</h2><h3 id="选择-Scheme"><a href="#选择-Scheme" class="headerlink" title="选择 Scheme"></a>选择 Scheme</h3><blockquote>
<p><code>Scheme</code> 是 NexT 提供的一种特性，借助于 <code>Scheme</code>，NexT 为你提供多种不同的外观。同时，几乎所有的配置都可以在 <code>Scheme</code> 之间共用。目前 NexT 支持三种 <code>Scheme</code>，他们是：</p>
</blockquote>
<ul>
<li>Muse - 默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白</li>
<li>Mist - Muse 的紧凑版本，整洁有序的单栏外观</li>
<li>Pisces - 双栏 Scheme，小家碧玉似的清新</li>
</ul>
<blockquote>
<p><code>Scheme</code>的切换通过更改 <code>主题配置文件</code>，搜索 <code>scheme</code> 关键字。 你会看到有三行 <code>scheme</code> 的配置，将你需用启用的<code>scheme</code> 前面注释 # 去除即可，如下：</p>
</blockquote>
<p><img src="9.png" alt=""></p>
<blockquote>
<p>不同的<code>Scheme值</code>对应的页面中的<code>menubar</code>和<code>sidebar</code>显示效果不一样</p>
</blockquote>
<h3 id="设置-语言"><a href="#设置-语言" class="headerlink" title="设置 语言"></a>设置 语言</h3><blockquote>
<p>编辑 <code>站点配置文件</code>， 将 <code>language</code>设置成你所需要的语言。建议明确设置你所需要的语言，例如选用简体中文，配置如下：</p>
</blockquote>
<pre><code>language: zh-Hans
</code></pre><blockquote>
<p>目前 NexT 支持的语言如以下表格所示：</p>
</blockquote>
<p><img src="10.png" alt=""></p>
<h3 id="设置菜单"><a href="#设置菜单" class="headerlink" title="设置菜单"></a>设置菜单</h3><blockquote>
<p>菜单配置包括三个部分，第一是<code>菜单项（名称和链接）</code>，第二是<code>菜单项的显示文本</code>，第三是<code>菜单项对应的图标</code>。通过编辑<code>主题配置文件</code>修改上述三部分。</p>
<p>菜单menu在面页中显示的位置根据<code>Scheme值</code>不同而不同</p>
</blockquote>
<h4 id="设定菜单项"><a href="#设定菜单项" class="headerlink" title="设定菜单项"></a>设定菜单项</h4><blockquote>
<p>设定菜单项，对应的字段是 <code>menu</code>。<code>menu</code>下的菜单项的设置格式是：<code>item name: link</code>。其中 <code>item name</code> 是菜单项的名称，这个名称并不直接显示在页面上，她将用于匹配图标以及翻译然后显示在页面上；<code>link</code>是菜单项的设定值，可以理解为文件路径(链接)</p>
</blockquote>
<p><img src="11.png" alt=""></p>
<p><img src="12.png" alt=""></p>
<h4 id="设定菜单项的显示文本"><a href="#设定菜单项的显示文本" class="headerlink" title="设定菜单项的显示文本"></a>设定菜单项的显示文本</h4><blockquote>
<p>在第一步中设置的菜单的名称并不直接用于界面上的展示。Hexo 在生成的时候将使用 这个名称查找对应语言的翻译文本，提取翻译内容并显示。这些翻译文本放置在<code>NexT</code> 主题目录下的 <code>languages/{language}.yml</code> （<code>{language} 是你在站点配置文件中language项配置的语言</code>）。</p>
</blockquote>
<p><img src="13.png" alt=""></p>
<blockquote>
<p>以简体中文为例，若你需要添加一个菜单项，比如 <code>others</code>。那么就需要修改简体中文对应的翻译文件 <code>languages/zh-Hans.yml</code>，在<code>menu</code> 字段下添加这一项：</p>
</blockquote>
<p><img src="14.png" alt=""></p>
<h4 id="设定菜单项对应的图标"><a href="#设定菜单项对应的图标" class="headerlink" title="设定菜单项对应的图标"></a>设定菜单项对应的图标</h4><blockquote>
<p>NexT使用的是<a href="http://fontawesome.io/" target="_blank" rel="external">Font Awesome</a> 提供的图标， <code>Font Awesome</code> 提供了 600+ 的图标，可以满足绝大的多数的场景，同时无须担心在 Retina 屏幕下图标模糊的问题。</p>
<p>设定菜单项的图标，对应的字段是主题配置文件中的 <code>menu_icons</code>项。设定格式是 <code>item name: icon name</code>，其中 <code>item name</code> 与第一步设定的菜单项名字对应，<code>icon name</code> 是 <code>Font Awesome</code> 图标的名字。而 <code>enable</code> 可用于控制是否显示图标，你可以设置成 <code>false</code> 来去掉图标。</p>
</blockquote>
<p><img src="15.png" alt=""></p>
<blockquote>
<p><strong>注意</strong></p>
<ul>
<li>在菜单图标开启的情况下，如果菜单项与菜单未匹配（没有设置或者无效的 <code>Font Awesome</code> 图标名字） 的情况下，NexT将会使用<code>?</code>作为图标。</li>
<li>注意键值（如<code>home</code>）的大小写要严格匹配</li>
</ul>
</blockquote>
<h3 id="设置侧栏"><a href="#设置侧栏" class="headerlink" title="设置侧栏"></a>设置侧栏</h3><blockquote>
<p>默认情况下，侧栏仅在文章页面（拥有目录列表）时才显示，并放置于右侧位置。 可以通过修改 <code>主题配置文件</code> 中的<code>sidebar</code> 字段来控制侧栏的行为。侧栏的设置包括两个部分，其一是侧栏的位置; 其二是侧栏显示的时机。</p>
</blockquote>
<h4 id="侧栏位置"><a href="#侧栏位置" class="headerlink" title="侧栏位置"></a>侧栏位置</h4><blockquote>
<p>编辑<code>主题配置文件</code>,通过修改<code>sidebar</code>字段中的<code>sidebar.position</code> 的值来设置侧栏的位置，可选值有：</p>
<ul>
<li>left - 靠左放置</li>
<li>right - 靠右放置</li>
</ul>
<p>不同的<code>Scheme</code>值对应的页面中的侧栏显示效果不一样</p>
</blockquote>
<p><img src="16.png" alt=""></p>
<h4 id="侧栏显示时机"><a href="#侧栏显示时机" class="headerlink" title="侧栏显示时机"></a>侧栏显示时机</h4><blockquote>
<p>编辑<code>主题配置文件</code>,通过修改<code>sidebar</code>字段中的<code>sidebar.display</code>的值来设置侧栏显示的时机，可选值有：</p>
<ul>
<li>post - 默认行为，在文章页面（拥有目录列表）时显示</li>
<li>always - 在所有页面中都显示</li>
<li>hide - 在所有页面中都隐藏（可以手动展开）</li>
<li>remove - 完全移除</li>
</ul>
</blockquote>
<p><img src="17.png" alt=""></p>
<h3 id="设置头像"><a href="#设置头像" class="headerlink" title="设置头像"></a>设置头像</h3><blockquote>
<p>编辑<code>主题配置文件</code>,通过修改<code>avatar</code>字段的值(头像的链接地址)来设置图像，其中可选的值有：</p>
</blockquote>
<p><img src="18.png" alt=""></p>
<blockquote>
<p><strong>自测发现该设置不生效，可直接将主题目录下的<code>sources/images/</code>目录中的<code>avatar.gif</code>替换成自己想设置的图像即可，注意目测是只识别gif格式</strong></p>
</blockquote>
<h3 id="设置作者昵称"><a href="#设置作者昵称" class="headerlink" title="设置作者昵称"></a>设置作者昵称</h3><blockquote>
<p>编辑<code>站点配置文件</code>,设置<code>author</code>字段的值为你的昵称。</p>
</blockquote>
<h3 id="设置站点描述"><a href="#设置站点描述" class="headerlink" title="设置站点描述"></a>设置站点描述</h3><blockquote>
<p>编辑<code>站点配置文件</code>,设置<code>description</code>字段的值为你的站点描述。站点描述可以是你喜欢的一句签名</p>
</blockquote>
<h1 id="个性化定制"><a href="#个性化定制" class="headerlink" title="个性化定制"></a>个性化定制</h1><h2 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h2><h3 id="设置RSS"><a href="#设置RSS" class="headerlink" title="设置RSS"></a>设置RSS</h3><blockquote>
<p>编辑<code>主题配置文件</code>，通过设定<code>rss</code>字段的值来设置RSS.为满足特定的使用场景，NexT中RSS有三个可用选项：</p>
<ul>
<li>false：禁用 RSS，不在页面上显示RSS连接</li>
<li>留空：使用Hexo生成的<code>Feed</code>链接.需要先安装 <a href="https://github.com/hexojs/hexo-generator-feed" target="_blank" rel="external">hexo-generator-feed</a>插件。</li>
<li>具体的链接地址：适用于已经烧制过 Feed 的情形</li>
</ul>
</blockquote>
<h4 id="搜索插件"><a href="#搜索插件" class="headerlink" title="搜索插件"></a>搜索插件</h4><blockquote>
<p>在<a href="https://hexo.io/plugins/" target="_blank" rel="external">插件社区1</a>或<a href="https://www.npmjs.com/package/" target="_blank" rel="external">插件社区2</a>中搜索上述插件，点击进去，里面都有详细的安装和配置指南</p>
</blockquote>
<h4 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h4><blockquote>
<p>在根目录下打开终端，输入命令<code>$ npm install hexo-generator-feed --save</code></p>
</blockquote>
<p><img src="19.png" alt=""></p>
<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><blockquote>
<p>编辑<code>主题配置文件</code>,设定<code>RSS</code>字段，添加<code>feed</code>字段</p>
</blockquote>
<p><img src="20.png" alt=""></p>
<h3 id="添加标签页面"><a href="#添加标签页面" class="headerlink" title="添加标签页面"></a>添加标签页面</h3><blockquote>
<p>新建「标签」页面，并在菜单中显示「标签」链接。「标签」页面将展示站点的所有标签，若你的所有文章都未包含标签，此页面将是空的。 </p>
</blockquote>
<h4 id="新建页面"><a href="#新建页面" class="headerlink" title="新建页面"></a>新建页面</h4><blockquote>
<p>在根目录下打开终端，输入<code>hexo new page</code>命令新建一个页面，命名为<code>tags</code>：</p>
</blockquote>
<p><img src="21.png" alt=""></p>
<h4 id="设置页面类型"><a href="#设置页面类型" class="headerlink" title="设置页面类型"></a>设置页面类型</h4><blockquote>
<p>编辑刚新建的页面，在<code>front-matter</code>区域添加<code>type</code>字段，值设置为<code>tags</code> ，主题将自动为这个页面显示标签云。页面内容如下：</p>
</blockquote>
<p><img src="22.png" alt=""></p>
<h4 id="修改菜单"><a href="#修改菜单" class="headerlink" title="修改菜单"></a>修改菜单</h4><blockquote>
<p>在菜单中添加链接。编辑<code>主题配置文件</code> ，添加<code>tags</code>到 <code>menu</code>字段中，如下:</p>
</blockquote>
<p><img src="23.png" alt=""></p>
<h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><blockquote>
<p>如果有启用<code>多说</code>或者 <code>Disqus</code>评论，页面也会带有评论。若需要关闭的话，在<code>front-matter</code>区域添加字段<code>comments</code>并将值设置为<code>false</code>，如：</p>
</blockquote>
<p><img src="24.png" alt=""></p>
<h3 id="添加分类页面"><a href="#添加分类页面" class="headerlink" title="添加分类页面"></a>添加分类页面</h3><blockquote>
<p>新建「分类」页面，并在菜单中显示「分类」链接。「分类」页面将展示站点的所有分类，若你的所有文章都未包含分类，此页面将是空的</p>
</blockquote>
<h4 id="新建页面-1"><a href="#新建页面-1" class="headerlink" title="新建页面"></a>新建页面</h4><blockquote>
<p>在根目录下打开终端，输入<code>hexo new page</code>命令新建一个页面，命名为<code>categories</code>：</p>
</blockquote>
<p><img src="25.png" alt=""></p>
<h4 id="设置页面类型-1"><a href="#设置页面类型-1" class="headerlink" title="设置页面类型"></a>设置页面类型</h4><blockquote>
<p>编辑刚新建的页面，在<code>front-matter</code>区域添加<code>type</code>字段，值设置为<code>categories</code> ，主题将自动为这个页面显示分类。页面内容如下：</p>
</blockquote>
<p><img src="26.png" alt=""></p>
<h4 id="修改菜单-1"><a href="#修改菜单-1" class="headerlink" title="修改菜单"></a>修改菜单</h4><blockquote>
<p>在菜单中添加链接。编辑<code>主题配置文件</code> ，添加<code>categories</code>到 <code>menu</code>字段中，如下:</p>
</blockquote>
<p><img src="27.png" alt=""></p>
<h4 id="注意-1"><a href="#注意-1" class="headerlink" title="注意"></a>注意</h4><blockquote>
<p>1.如果有启用<code>多说</code>或者 <code>Disqus</code>评论，页面也会带有评论。若需要关闭的话，在<code>front-matter</code>区域添加字段<code>comments</code>并将值设置为<code>false</code>，如：</p>
</blockquote>
<p><img src="28.png" alt=""></p>
<blockquote>
<p>2.分类页面的排版遵循规则：不同级别的名称按照博文<code>front-matter</code>区域中<code>categories</code>字段指定的从上到下的顺序依次层次化显示；同级别的名称安装其名称首字母在ASCII表中的位置从上到下依次显示。如下：</p>
</blockquote>
<p><img src="29.png" alt=""></p>
<h3 id="设置字体"><a href="#设置字体" class="headerlink" title="设置字体"></a>设置字体</h3><blockquote>
<p><strong>注意</strong>：此特性在版本<code>5.0.1</code>中引入，要使用此功能请确保所使用的 NexT 版本在此之后</p>
<p>为了解决<a href="https://www.google.com/fonts" target="_blank" rel="external">Google Fonts API</a>不稳定的问题，NexT 在 5.0.1 中引入此特性。 通过此特性，你可以指定所使用的字体库外链地址；与此同时，NexT 开放了 5 个特定范围的字体设定，他们是：</p>
<ul>
<li>全局字体：定义的字体将在全站范围使用</li>
<li>标题字体：文章内标题的字体（h1, h2, h3, h4, h5, h6）</li>
<li>文章字体：文章所使用的字体</li>
<li>Logo字体：Logo 所使用的字体</li>
<li>代码字体： 代码块所使用的字体</li>
</ul>
<p>各项所指定的字体将作为首选字体，当他们不可用时会自动 <code>Fallback</code> 到<code>NexT</code>设定的基础字体组：</p>
<ul>
<li>非代码类字体：<code>Fallback</code>到 <code>&quot;PingFang SC&quot;</code>, <code>&quot;Microsoft YaHei&quot;</code>, <code>sans-serif</code></li>
<li>代码类字体：<code>Fallback</code> 到<code>consolas, Menlo</code>, <code>&quot;PingFang SC&quot;</code>, <code>&quot;Microsoft YaHei&quot;</code>, <code>monospace</code></li>
</ul>
<p>另外，每一项都有一个额外的 <code>external</code>属性，此属性用来控制是否使用外链字体库。 开放此属性方便你设定那些已经安装在系统中的字体，减少不必要的请求（请求大小）</p>
</blockquote>
<p><img src="30.png" alt=""></p>
<h3 id="设置代码高亮主题"><a href="#设置代码高亮主题" class="headerlink" title="设置代码高亮主题"></a>设置代码高亮主题</h3><h4 id="启用语法高亮"><a href="#启用语法高亮" class="headerlink" title="启用语法高亮"></a>启用语法高亮</h4><h5 id="hexo默认-hightlight-js"><a href="#hexo默认-hightlight-js" class="headerlink" title="hexo默认[hightlight.js]"></a>hexo默认[hightlight.js]</h5><blockquote>
<p>hexo已实现代码高亮，代码封装在<code>hexo-util</code>插件中，使用的是<a href="https://highlightjs.org/" target="_blank" rel="external">hightlight.js</a>，先编辑<code>站点配置文件</code>,修改<code>highlight</code>字段，<code>enable</code>项的值设为<code>true</code></p>
</blockquote>
<p><img src="44.png" alt=""></p>
<blockquote>
<p>然后通过<code>include_code</code>tag插件双标签来引用代码块，功能已经很强大了，而且自带行号显示。</p>
</blockquote>
<h5 id="NexT使用-Tomorrow-Theme"><a href="#NexT使用-Tomorrow-Theme" class="headerlink" title="NexT使用[Tomorrow Theme]"></a>NexT使用[Tomorrow Theme]</h5><blockquote>
<p>NexT使用 <a href="https://github.com/chriskempson/tomorrow-theme" target="_blank" rel="external">Tomorrow Theme</a> 作为代码高亮，共有5款主题供你选择。NexT默认使用的是白色的<code>normal</code>主题，可选的值有 <code>normal，night</code>， <code>night blue</code>， <code>night bright</code>， <code>night eighties</code>：</p>
</blockquote>
<p><img src="31.png" alt=""></p>
<blockquote>
<p>直接编辑<code>主题配置文件</code>，更改<code>highlight_theme</code>字段的值，如：</p>
</blockquote>
<p><img src="32.png" alt=""></p>
<h4 id="代码引用格式"><a href="#代码引用格式" class="headerlink" title="代码引用格式"></a>代码引用格式</h4><h5 id="格式一"><a href="#格式一" class="headerlink" title="格式一"></a>格式一</h5><p><img src="43.png" alt=""></p>
<blockquote>
<p>例如：</p>
</blockquote>
<p><img src="41.png" alt=""></p>
<blockquote>
<p>常用语言对照表如下：</p>
</blockquote>
<p><img src="42.png" alt=""></p>
<h5 id="格式二"><a href="#格式二" class="headerlink" title="格式二"></a>格式二</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;% codeblock [lang:language] [title] [url] [link text] %&#125;</div><div class="line">code snippet</div><div class="line">&#123;% endcodeblock %&#125;</div></pre></td></tr></table></figure>
<h3 id="侧边栏社交链接"><a href="#侧边栏社交链接" class="headerlink" title="侧边栏社交链接"></a>侧边栏社交链接</h3><blockquote>
<p>侧栏社交链接的修改包含两个部分，第一是<code>链接</code>，第二是<code>链接图标</code>。两者配置均在<code>主题配置文件</code>中</p>
</blockquote>
<h4 id="配置链接"><a href="#配置链接" class="headerlink" title="配置链接"></a>配置链接</h4><blockquote>
<p>编辑<code>主题配置文件</code>，修改<code>social</code>字段的值，其键值格式是：<code>显示文本:链接地址</code></p>
</blockquote>
<p><img src="33.png" alt=""></p>
<h4 id="配置链接图标"><a href="#配置链接图标" class="headerlink" title="配置链接图标"></a>配置链接图标</h4><blockquote>
<p>编辑<code>主题配置文件</code>，修改<code>social_icons</code>字段的值，格式是<code>匹配键: Font Awesome 图标名称</code>，<code>匹配键</code>与上一步所配置的链接的<code>显示文本</code>相同（大小写严格匹配），<code>图标名称</code>是<a href="http://fontawesome.io/icons/" target="_blank" rel="external">Font Awesome图标</a>的名字（不必带 fa- 前缀）。<code>enable</code>选项用于控制是否显示图标，你可以设置成<code>false</code>来去掉图标。</p>
</blockquote>
<p><img src="34.png" alt=""></p>
<h3 id="开启打赏功能"><a href="#开启打赏功能" class="headerlink" title="开启打赏功能"></a>开启打赏功能</h3><blockquote>
<p>可参考<a href="https://github.com/iissnan/hexo-theme-next/pull/687" target="_blank" rel="external">habren</a>进行设置</p>
</blockquote>
<p><strong>编辑<code>主题配置文件</code>,添加如下内容：</strong></p>
<p><img src="39.png" alt=""></p>
<blockquote>
<p>图片放在<code>theme/next/souce/images/</code>下。效果如下：</p>
</blockquote>
<p><img src="45.png" alt=""></p>
<h3 id="设置友情链接"><a href="#设置友情链接" class="headerlink" title="设置友情链接"></a>设置友情链接</h3><blockquote>
<p>可参考<a href="https://github.com/iissnan/hexo-theme-next/pull/250" target="_blank" rel="external">iamwent </a>进行配置</p>
</blockquote>
<p><strong>编辑<code>主题配置文件</code>,添加如下内容：</strong></p>
<p><img src="38.png" alt=""></p>
<h3 id="多说评论显示UA"><a href="#多说评论显示UA" class="headerlink" title="多说评论显示UA"></a>多说评论显示UA</h3><blockquote>
<p>Hexo创建的网站是静态的，也就是说，所有内容都是事先生成好的。这样就导致没法在网站上使用动态功能，比如<code>登录</code>、<code>评论</code>等;之前可以通过一些第三方的插件（<code>多说</code>）来曲线救国，实现这些动态功能。但是<code>多说</code>即将关闭:<code>因公司业务调整，非常遗憾的向大家宣布多说项目即将关闭。 我们将于2017年6月1日正式关停服务，在此之前您可以通过后台的数据导出功能导出自己站点的评论数据。 对此给您造成的不便，我们深表歉意，感谢您的一路相伴</code></p>
</blockquote>
<h3 id="腾讯公益404页面"><a href="#腾讯公益404页面" class="headerlink" title="腾讯公益404页面"></a>腾讯公益404页面</h3><blockquote>
<p>由<a href="https://github.com/iissnan/hexo-theme-next/pull/126" target="_blank" rel="external">xirong</a>提供,具体实现步骤如下所示：</p>
</blockquote>
<p><strong>1.使用<code>hexo new page</code>命令生成一个<code>page</code>文件
</strong><br><img src="46.png" alt=""></p>
<p><strong>2.编辑该<code>.md</code>page文件，将<code>title</code>值改为<code>公益</code>（站点menu菜单显示文本），<code>type</code>值该为<code>commonweal</code>,最后将下面<code>html</code>代码粘贴上去保存。    </strong>                                                </p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE HTML&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"content-type"</span> <span class="attr">content</span>=<span class="string">"text/html;charset=utf-8;"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge,chrome=1"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"robots"</span> <span class="attr">content</span>=<span class="string">"all"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"robots"</span> <span class="attr">content</span>=<span class="string">"index,follow"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"https://qzone.qq.com/gy/404/style/404style.css"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/plain"</span> <span class="attr">src</span>=<span class="string">"http://www.qq.com/404/search_children.js"</span></span></div><div class="line">          <span class="attr">charset</span>=<span class="string">"utf-8"</span> <span class="attr">homePageUrl</span>=<span class="string">"/"</span></div><div class="line">          <span class="attr">homePageName</span>=<span class="string">"回到我的主页"</span>&gt;<span class="undefined"></span></div><div class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://qzone.qq.com/gy/404/data.js"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://qzone.qq.com/gy/404/page.js"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="47.png" alt=""></p>
<p><strong>3.编辑<code>主题配置文件</code>，在<code>menu</code>字段添加以下参数<code>commonweal: /commonweal/index.html</code>；在<code>menu_icons</code>字段添加以下参数<code>commonweal: heartbeat</code></strong></p>
<p><strong>4.依次执行<code>hexo g</code>命令和<code>hexo s</code>命令，后，用浏览器预览</strong></p>
<p><img src="48.png" alt=""></p>
<h3 id="站点建立时间"><a href="#站点建立时间" class="headerlink" title="站点建立时间"></a>站点建立时间</h3><blockquote>
<p>这个时间将在站点的底部显示，例如<code>© 2013 - 2015</code>。 编辑<code>主题配置文件</code>，新增字段<code>since</code>,如下：</p>
</blockquote>
<h3 id="订阅微信公众号"><a href="#订阅微信公众号" class="headerlink" title="订阅微信公众号"></a>订阅微信公众号</h3><blockquote>
<p>此特性在版本<code>5.0.1</code>中引入，要使用此功能请确保所使用的 NexT 版本在此之后.</p>
</blockquote>
<p><strong>1.在微信公众号平台下载您的二维码，并将它存放于<code>主题目录</code>下的<code>source/images/</code>目录下。</strong><br><strong>2.编辑<code>主题配置文件</code>,修改<code>wechat_subsriber</code>字段内容如下：</strong></p>
<p><img src="49.png" alt=""></p>
<p><strong>3.依次执行<code>hexo g</code>和<code>hexo s</code>命令，效果如下：</strong></p>
<p><img src="50.png" alt=""></p>
<h3 id="设置动画效果"><a href="#设置动画效果" class="headerlink" title="设置动画效果"></a>设置动画效果</h3><blockquote>
<p>NexT默认开启动画效果，效果使用<code>JavaScript</code> 编写，因此需要等待 <code>JavaScript</code>脚本完全加载完毕后才会显示内容。 如果您比较在乎速度，可以将设置此字段的值为<code>false</code>来关闭动画。</p>
<p>编辑 <code>主题配置文件</code>， 搜索 <code>use_motion</code>，根据您的需求设置值为<code>true</code>或者 <code>false</code> 即可</p>
</blockquote>
<h2 id="第三方服务"><a href="#第三方服务" class="headerlink" title="第三方服务"></a>第三方服务</h2><h3 id="评论系统"><a href="#评论系统" class="headerlink" title="评论系统"></a>评论系统</h3><h4 id="多说"><a href="#多说" class="headerlink" title="多说"></a>多说</h4><h4 id="Disqus"><a href="#Disqus" class="headerlink" title="Disqus"></a>Disqus</h4><h4 id="Facebook-Comments"><a href="#Facebook-Comments" class="headerlink" title="Facebook Comments"></a>Facebook Comments</h4><h4 id="HyperComments"><a href="#HyperComments" class="headerlink" title="HyperComments"></a>HyperComments</h4><h4 id="网易云跟帖"><a href="#网易云跟帖" class="headerlink" title="网易云跟帖"></a>网易云跟帖</h4><h4 id="来必力"><a href="#来必力" class="headerlink" title="来必力"></a>来必力</h4><h3 id="数据统计与分析"><a href="#数据统计与分析" class="headerlink" title="数据统计与分析"></a>数据统计与分析</h3><h4 id="百度统计"><a href="#百度统计" class="headerlink" title="百度统计"></a>百度统计</h4><h4 id="Google分析"><a href="#Google分析" class="headerlink" title="Google分析"></a>Google分析</h4><h4 id="腾讯分析"><a href="#腾讯分析" class="headerlink" title="腾讯分析"></a>腾讯分析</h4><h4 id="CNZZ统计"><a href="#CNZZ统计" class="headerlink" title="CNZZ统计"></a>CNZZ统计</h4><h4 id="不蒜子统计"><a href="#不蒜子统计" class="headerlink" title="不蒜子统计"></a>不蒜子统计</h4><h4 id="腾讯移动分析"><a href="#腾讯移动分析" class="headerlink" title="腾讯移动分析"></a>腾讯移动分析</h4><h3 id="内容分享服务"><a href="#内容分享服务" class="headerlink" title="内容分享服务"></a>内容分享服务</h3><h4 id="JiaThis"><a href="#JiaThis" class="headerlink" title="JiaThis"></a>JiaThis</h4><h4 id="百度分享"><a href="#百度分享" class="headerlink" title="百度分享"></a>百度分享</h4><h4 id="多说分享"><a href="#多说分享" class="headerlink" title="多说分享"></a>多说分享</h4><h4 id="AddThis"><a href="#AddThis" class="headerlink" title="AddThis"></a>AddThis</h4><h3 id="搜索服务"><a href="#搜索服务" class="headerlink" title="搜索服务"></a>搜索服务</h3><h4 id="Swiftype"><a href="#Swiftype" class="headerlink" title="Swiftype"></a>Swiftype</h4><h4 id="微搜索"><a href="#微搜索" class="headerlink" title="微搜索"></a>微搜索</h4><h4 id="Local-Search"><a href="#Local-Search" class="headerlink" title="Local Search"></a>Local Search</h4><blockquote>
<p>添加<code>百度/谷歌/本地</code> 自定义站点内容搜索</p>
</blockquote>
<h5 id="安装插件-1"><a href="#安装插件-1" class="headerlink" title="安装插件"></a>安装插件</h5><blockquote>
<p>在根目录下打开终端，执行下列命令<code>npm install hexo-generator-searchdb --save</code></p>
</blockquote>
<p><img src="35.png" alt=""></p>
<h5 id="编辑配置文件"><a href="#编辑配置文件" class="headerlink" title="编辑配置文件"></a>编辑配置文件</h5><p><strong>1、编辑站点配置文件，添加如下内容：</strong></p>
<p><img src="36.png" alt=""></p>
<p><strong>2、编辑主题配置文件，启动本地搜索功能</strong></p>
<p><img src="37.png" alt=""></p>
<h4 id="Algolia"><a href="#Algolia" class="headerlink" title="Algolia"></a>Algolia</h4><h3 id="其他服务"><a href="#其他服务" class="headerlink" title="其他服务"></a>其他服务</h3><h4 id="MathJax"><a href="#MathJax" class="headerlink" title="MathJax"></a>MathJax</h4><h4 id="Facebook-SDK"><a href="#Facebook-SDK" class="headerlink" title="Facebook SDK"></a>Facebook SDK</h4><h4 id="Google-Webmaster-tools"><a href="#Google-Webmaster-tools" class="headerlink" title="Google Webmaster tools"></a>Google Webmaster tools</h4><h4 id="多说热评文章"><a href="#多说热评文章" class="headerlink" title="多说热评文章"></a>多说热评文章</h4><h2 id="内建标签"><a href="#内建标签" class="headerlink" title="内建标签"></a>内建标签</h2><h3 id="文本居中的引用"><a href="#文本居中的引用" class="headerlink" title="文本居中的引用"></a>文本居中的引用</h3><h4 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h4><h4 id="效果示例"><a href="#效果示例" class="headerlink" title="效果示例"></a>效果示例</h4><h3 id="突破容器宽度限制的图片"><a href="#突破容器宽度限制的图片" class="headerlink" title="突破容器宽度限制的图片"></a>突破容器宽度限制的图片</h3><h4 id="使用方式-1"><a href="#使用方式-1" class="headerlink" title="使用方式"></a>使用方式</h4><h4 id="效果示例-1"><a href="#效果示例-1" class="headerlink" title="效果示例"></a>效果示例</h4><h3 id="Bootstrap-Callout"><a href="#Bootstrap-Callout" class="headerlink" title="Bootstrap Callout"></a>Bootstrap Callout</h3><h4 id="使用方式-2"><a href="#使用方式-2" class="headerlink" title="使用方式"></a>使用方式</h4><h4 id="效果示例-2"><a href="#效果示例-2" class="headerlink" title="效果示例"></a>效果示例</h4><h2 id="进阶设定"><a href="#进阶设定" class="headerlink" title="进阶设定"></a>进阶设定</h2><h3 id="设置JavaScipt第三方库"><a href="#设置JavaScipt第三方库" class="headerlink" title="设置JavaScipt第三方库"></a>设置JavaScipt第三方库</h3><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a><a href="http://theme-next.iissnan.com/faqs.html" target="_blank" rel="external">常见问题</a></h2><h3 id="如何设置「阅读全文」"><a href="#如何设置「阅读全文」" class="headerlink" title="如何设置「阅读全文」"></a>如何设置「阅读全文」</h3><h3 id="Favicon-设置后没有生效"><a href="#Favicon-设置后没有生效" class="headerlink" title="Favicon 设置后没有生效"></a>Favicon 设置后没有生效</h3><h3 id="如何更改字体"><a href="#如何更改字体" class="headerlink" title="如何更改字体"></a>如何更改字体</h3><h3 id="为何新增的菜单项显示-Menu-xxx"><a href="#为何新增的菜单项显示-Menu-xxx" class="headerlink" title="为何新增的菜单项显示 Menu.xxx"></a>为何新增的菜单项显示 Menu.xxx</h3><h3 id="标签-分类数量统计不准确"><a href="#标签-分类数量统计不准确" class="headerlink" title="标签/分类数量统计不准确"></a>标签/分类数量统计不准确</h3><h3 id="如何关闭新建页面的评论功能"><a href="#如何关闭新建页面的评论功能" class="headerlink" title="如何关闭新建页面的评论功能"></a>如何关闭新建页面的评论功能</h3><h3 id="如何设置页面文章的篇数"><a href="#如何设置页面文章的篇数" class="headerlink" title="如何设置页面文章的篇数"></a>如何设置页面文章的篇数</h3><h3 id="如何优化-NexT-主题"><a href="#如何优化-NexT-主题" class="headerlink" title="如何优化 NexT 主题"></a>如何优化 NexT 主题</h3><h3 id="Cannot-find-module-XXX"><a href="#Cannot-find-module-XXX" class="headerlink" title="Cannot find module XXX"></a>Cannot find module XXX</h3><h2 id="其他平台"><a href="#其他平台" class="headerlink" title="其他平台"></a><a href="http://theme-next.iissnan.com/platforms.html" target="_blank" rel="external">其他平台</a></h2><blockquote>
<p>这里包含 <code>NexT</code>在其他平台的实现版本</p>
<p><strong>Farbox</strong></p>
<ul>
<li><a href="https://github.com/Sunnyyoung/Farbox-NexT" target="_blank" rel="external">Farbox-NexT</a></li>
</ul>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;
    
    </summary>
    
      <category term="1-Coder社区(RedArmy)" scheme="http://yoursite.com/categories/1-Coder%E7%A4%BE%E5%8C%BA-RedArmy/"/>
    
      <category term="2-虚实奇正" scheme="http://yoursite.com/categories/1-Coder%E7%A4%BE%E5%8C%BA-RedArmy/2-%E8%99%9A%E5%AE%9E%E5%A5%87%E6%AD%A3/"/>
    
      <category term="1-自建博客" scheme="http://yoursite.com/categories/1-Coder%E7%A4%BE%E5%8C%BA-RedArmy/2-%E8%99%9A%E5%AE%9E%E5%A5%87%E6%AD%A3/1-%E8%87%AA%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="2-静态" scheme="http://yoursite.com/categories/1-Coder%E7%A4%BE%E5%8C%BA-RedArmy/2-%E8%99%9A%E5%AE%9E%E5%A5%87%E6%AD%A3/1-%E8%87%AA%E5%BB%BA%E5%8D%9A%E5%AE%A2/2-%E9%9D%99%E6%80%81/"/>
    
      <category term="3-主题优化" scheme="http://yoursite.com/categories/1-Coder%E7%A4%BE%E5%8C%BA-RedArmy/2-%E8%99%9A%E5%AE%9E%E5%A5%87%E6%AD%A3/1-%E8%87%AA%E5%BB%BA%E5%8D%9A%E5%AE%A2/2-%E9%9D%99%E6%80%81/3-%E4%B8%BB%E9%A2%98%E4%BC%98%E5%8C%96/"/>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
      <category term="NexT" scheme="http://yoursite.com/tags/NexT/"/>
    
  </entry>
  
  <entry>
    <title>静态站点生成框架之Hexo详解</title>
    <link href="http://yoursite.com/2017/03/21/Hexo%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2017/03/21/Hexo详解/</id>
    <published>2017-03-21T13:02:56.000Z</published>
    <updated>2017-03-24T04:27:56.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><strong>Hexo=hexo生成器(hexo n)+hexo解析器(hexo g)+hexo部署器(hexo d)。它的工作机制是：</strong></p>
</blockquote>
<ol>
<li>hexo生成器根据<code>scaffolds</code>目录下的<code>draft.md</code>、<code>page.md</code>、<code>post.md</code>模板文件分别在<code>source/_draft/</code>、<code>source/</code>、<code>source/_post</code>目录下生成对应的<code>filename.md</code>文件和以<code>filename</code>命名的文件夹(该文件夹是通过编辑<code>站点配置文件</code>中的<code>post_asset_folder</code>字段的值为<code>true</code>实现的，可以将与<code>filename.md</code>文件相关的所有内容都放在此文件夹中，本文会在<code>Asset资源文件夹</code>中有介绍)</li>
<li>hexo解析器根据<code>站点配置文件</code>和<code>主题配置文件</code>将根目录下的<code>source/</code>和主题目录下的<code>source/</code>所有文件解析成静态站点文件保存到根目录下解析器新建的<code>public</code>目录中。解析机制是：将<code>.md</code>文件和<code>.html</code>文件根据对应的<a href="">Markdown</a>语法和<a href="">html</a>语法解析成对应的<code>.html</code>文件。其他文件直接复制到对应目录下。此时可以通过本地浏览器预览静态站点，本质就是访问<code>public</code>文件夹。</li>
<li>hexo部署器先直接复制一份<code>public/</code>目录下所有文件内容到部署器新建的<code>.deploy_git/</code>下；然后将该目录下的所有文件<code>push</code>到远程托管仓库，达到部署静态站点到<code>Internet</code>上去。</li>
</ol>
<ul>
<li><a id="more"></a>
</li>
</ul>
<h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><blockquote>
<p><a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="external">Hexo官方文档</a></p>
</blockquote>
<h1 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><blockquote>
<p>欢迎使用 Hexo，本文档将帮助您快速上手。如果您在使用过程中遇到问题，请查看<a href="https://hexo.io/zh-cn/docs/troubleshooting.html" target="_blank" rel="external">问题解答</a> 中的解答，或者在<a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>、<a href="https://groups.google.com/group/hexo" target="_blank" rel="external">Google Group</a> 上提问。</p>
</blockquote>
<h3 id="什么是hexo"><a href="#什么是hexo" class="headerlink" title="什么是hexo?"></a>什么是hexo?</h3><blockquote>
<p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用<a href="http://daringfireball.net/projects/markdown/" target="_blank" rel="external">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页</p>
</blockquote>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><blockquote>
<p>安装 Hexo 相当简单。然而在安装前，您必须检查电脑中是否已安装下列应用程序：</p>
</blockquote>
<ul>
<li><a href="http://nodejs.org/" target="_blank" rel="external">Node.js</a></li>
<li><a href="http://git-scm.com/" target="_blank" rel="external">Git</a></li>
</ul>
<h4 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h4><ul>
<li>Windows：下载并安装 <a href="https://git-scm.com/download/win" target="_blank" rel="external">git</a>；或者<a href="https://github.com/waylau/git-for-win" target="_blank" rel="external">快速下载安装包</a>进行安装</li>
<li>Mac：使用 <a href="http://mxcl.github.com/homebrew/" target="_blank" rel="external">Homebrew</a>, <a href="http://www.macports.org/" target="_blank" rel="external">MacPorts</a> ：<code>brew install git</code>;或下载<a href="http://sourceforge.net/projects/git-osx-installer/" target="_blank" rel="external">安装程序</a> 安装</li>
<li>Linux (Ubuntu, Debian)：<code>sudo apt-get install git-core</code></li>
<li>Linux (Fedora, Red Hat, CentOS)：<code>sudo yum install git-core</code></li>
</ul>
<blockquote>
<p>详细的git使用方法可参考<a href="">git教程</a></p>
</blockquote>
<h4 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h4><h5 id="使用nvm–最佳的安装方式"><a href="#使用nvm–最佳的安装方式" class="headerlink" title="使用nvm–最佳的安装方式"></a>使用<a href="https://github.com/creationix/nvm" target="_blank" rel="external">nvm</a>–最佳的安装方式</h5><blockquote>
<p>curl命令安装nvm:</p>
</blockquote>
<p><code>$ curl https://raw.github.com/creationix/nvm/master/install.sh | sh</code></p>
<blockquote>
<p>Wget命令安装nvm:</p>
</blockquote>
<p><code>$ wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh</code></p>
<blockquote>
<p>安装完成后，重启终端并执行下列命令即可安装 Node.js。</p>
</blockquote>
<p><code>$ nvm install stable</code></p>
<blockquote>
<p><strong>Windows 用户</strong></p>
<ul>
<li>对于windows用户来说，建议使用安装程序进行安装。安装时，请勾选<strong> Add to PATH </strong>选项。</li>
<li>另外，您也可以使用<strong> Git Bash </strong>这是git for windows自带的一组程序，提供了Linux风格的shell，在该环境下，您可以直接用上面提到的命令来安装Node.js。打开它的方法很简单，在任意位置单击右键，选择“Git Bash Here”即可</li>
<li>也可以使用<strong>Cmder控制台</strong>直接用上面提到的命令来安装Node.js。它的使用方法请见<a href="">Cmder教程</a></li>
<li>由于Hexo的很多操作都涉及到命令行，您可以考虑始终使用<strong>Git Bash</strong>或者<strong>Cmder控制台</strong>来进行操作。但是建议使用<strong>Cmder控制台</strong>，因为它的速度较快，效率较高</li>
</ul>
</blockquote>
<h5 id="下载安装程序来安装"><a href="#下载安装程序来安装" class="headerlink" title="下载安装程序来安装"></a>下载<a href="http://nodejs.org/" target="_blank" rel="external">安装程序</a>来安装</h5><h4 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h4><blockquote>
<p>所有必备的应用程序安装完成后，即可使用npm命令安装 Hexo。</p>
</blockquote>
<p><code>$ npm install -g hexo-cli</code></p>
<blockquote>
<p>详细的npm使用方法请见<a href="">npm教程</a></p>
</blockquote>
<h2 id="Hexo命令"><a href="#Hexo命令" class="headerlink" title="Hexo命令"></a>Hexo命令</h2><h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><h4 id="init"><a href="#init" class="headerlink" title="init"></a>init</h4><pre><code>$ hexo init [folder]
</code></pre><blockquote>
<p>新建一个网站。如果没有设置<code>folder</code> ，Hexo 默认在当前的文件夹建立网站。</p>
</blockquote>
<h4 id="new"><a href="#new" class="headerlink" title="new"></a>new</h4><pre><code>$ hexo new [layout] &lt;title&gt;
</code></pre><blockquote>
<p>新建一篇文章。如果没有设置 layout(post、page、draft) 的话，默认使用 <code>_config.yml</code> 中的 <code>default_layout</code> 参数代替。如果标题包含空格的话，请使用引号括起来。</p>
</blockquote>
<h4 id="generate"><a href="#generate" class="headerlink" title="generate"></a>generate</h4><pre><code>$ hexo generate
$ hexo g(简写版)
</code></pre><blockquote>
<p>生成静态站点文件</p>
</blockquote>
<p><img src="9.png" alt=""></p>
<h4 id="publish"><a href="#publish" class="headerlink" title="publish"></a>publish</h4><pre><code>$ hexo publish [layout] &lt;filename&gt;
</code></pre><blockquote>
<p>发表草稿</p>
</blockquote>
<h4 id="server"><a href="#server" class="headerlink" title="server"></a>server</h4><pre><code>$ hexo server
$ hexo s(简写版)
</code></pre><blockquote>
<p>启动服务器。默认情况下，访问网址为：<code>http://localhost:4000/</code></p>
</blockquote>
<p><img src="10.png" alt=""></p>
<h4 id="deploy"><a href="#deploy" class="headerlink" title="deploy"></a>deploy</h4><pre><code>$ hexo deploy
$ hexo d(简写版)
</code></pre><blockquote>
<p>上传到远程仓库部署网站</p>
</blockquote>
<p><img src="11.png" alt=""></p>
<h4 id="render"><a href="#render" class="headerlink" title="render"></a>render</h4><pre><code>$ hexo render &lt;file1&gt; [file2] ...
</code></pre><blockquote>
<p>渲染文件</p>
</blockquote>
<p><img src="12.png" alt=""></p>
<h4 id="migrate"><a href="#migrate" class="headerlink" title="migrate"></a>migrate</h4><pre><code>$ hexo migrate &lt;type&gt;
</code></pre><blockquote>
<p>从其他博客系统<a href="https://hexo.io/zh-cn/docs/migration.html" target="_blank" rel="external">迁移内容</a></p>
</blockquote>
<h4 id="clean"><a href="#clean" class="headerlink" title="clean"></a>clean</h4><pre><code>$ hexo clean
</code></pre><blockquote>
<p>清除缓存文件 (<code>db.json</code>) 和已生成的静态文件 (<code>public</code>)</p>
</blockquote>
<pre><code>注意：在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。
</code></pre><h4 id="list"><a href="#list" class="headerlink" title="list"></a>list</h4><pre><code>$ hexo list &lt;type&gt;
</code></pre><blockquote>
<p>列出网站资料</p>
</blockquote>
<h4 id="version"><a href="#version" class="headerlink" title="version"></a>version</h4><pre><code>$ hexo version
</code></pre><blockquote>
<p>显示 Hexo 版本</p>
</blockquote>
<h3 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h3><h4 id="安全模式"><a href="#安全模式" class="headerlink" title="安全模式"></a>安全模式</h4><pre><code>$ hexo --safe
</code></pre><blockquote>
<p>在安全模式下，不会载入插件和脚本。当您在安装新插件遭遇问题时，可以尝试以安全模式重新执行</p>
</blockquote>
<h4 id="调试模式"><a href="#调试模式" class="headerlink" title="调试模式"></a>调试模式</h4><pre><code>$ hexo --debug
</code></pre><blockquote>
<p>在终端中显示调试信息并记录到 <code>debug.log</code>。当您碰到问题时，可以尝试用调试模式重新执行一次，并<a href="https://github.com/hexojs/hexo/issues/new" target="_blank" rel="external">提交调试信息到 GitHub</a></p>
</blockquote>
<h4 id="简洁模式"><a href="#简洁模式" class="headerlink" title="简洁模式"></a>简洁模式</h4><pre><code>$ hexo --silent
</code></pre><blockquote>
<p>隐藏终端信息</p>
</blockquote>
<h4 id="自定义配置文件的路径"><a href="#自定义配置文件的路径" class="headerlink" title="自定义配置文件的路径"></a>自定义配置文件的路径</h4><pre><code>$ hexo --config custom.yml
</code></pre><blockquote>
<p>自定义配置文件的路径，执行后将不再使用<code>_config.yml</code></p>
</blockquote>
<h4 id="显示草稿"><a href="#显示草稿" class="headerlink" title="显示草稿"></a>显示草稿</h4><pre><code>$ hexo --draft
</code></pre><blockquote>
<p>显示 <code>source/_drafts</code> 文件夹中的草稿文章</p>
</blockquote>
<h4 id="自定义-CWD"><a href="#自定义-CWD" class="headerlink" title="自定义 CWD"></a>自定义 CWD</h4><pre><code>$ hexo --cwd /path/to/cwd
</code></pre><blockquote>
<p>自定义当前工作目录（<code>Current working directory</code>）的路径。</p>
</blockquote>
<h2 id="Hexo框架的目录结构"><a href="#Hexo框架的目录结构" class="headerlink" title="Hexo框架的目录结构"></a>Hexo框架的目录结构</h2><blockquote>
<p>安装 Hexo 完成后，先新建一个文件夹，作为存放博客网站所需要的仓库，然后使用下列git命令初始化仓库,以便于版本控制该仓库</p>
</blockquote>
<pre><code>git init
</code></pre><blockquote>
<p>然后执行下列hexo命令，Hexo将会在指定文件夹中新建所需要的文件。</p>
</blockquote>
<pre><code>$ hexo init &lt;folder&gt;-----初始化博客框架到指定folder目录下，该目录为博客网站的根目录
$ cd &lt;folder&gt;------------切换到博客网站根目录
$ npm install------------安装软件依赖包
</code></pre><h3 id="执行完hexo-init命令后，指定folder文件夹-根目录-下的目录结构如下："><a href="#执行完hexo-init命令后，指定folder文件夹-根目录-下的目录结构如下：" class="headerlink" title="执行完hexo init命令后，指定folder文件夹(根目录)下的目录结构如下："></a>执行完<code>hexo init</code>命令后，指定folder文件夹(根目录)下的目录结构如下：</h3><pre><code>.
├── _config.yml
├── package.json
|—— db.json
├── scaffolds
├── source
|   ├── _drafts
|   └── _posts
└── themes
</code></pre><h4 id="config-yml文件"><a href="#config-yml文件" class="headerlink" title="_config.yml文件"></a>_config.yml文件</h4><blockquote>
<p>该文件保存网站的<a href="https://hexo.io/zh-cn/docs/configuration.html" target="_blank" rel="external">配置</a> 信息，您可以在此配置大部分的参数。</p>
</blockquote>
<h4 id="package-json文件"><a href="#package-json文件" class="headerlink" title="package.json文件"></a>package.json文件</h4><blockquote>
<p>该文件保存着已安装应用程序的信息。<a href="http://embeddedjs.com/" target="_blank" rel="external">EJS</a>, <a href="http://learnboost.github.io/stylus/" target="_blank" rel="external">Stylus</a> 和 <a href="http://daringfireball.net/projects/markdown/" target="_blank" rel="external">Markdown</a> renderer 已默认安装，您可以自由移除。</p>
</blockquote>
<pre><code>package.json
{
  &quot;name&quot;: &quot;hexo-site&quot;,
  &quot;version&quot;: &quot;0.0.0&quot;,
  &quot;private&quot;: true,
  &quot;hexo&quot;: {
    &quot;version&quot;: &quot;&quot;
  },
  &quot;dependencies&quot;: {
    &quot;hexo&quot;: &quot;^3.0.0&quot;,
    &quot;hexo-generator-archive&quot;: &quot;^0.1.0&quot;,
    &quot;hexo-generator-category&quot;: &quot;^0.1.0&quot;,
    &quot;hexo-generator-index&quot;: &quot;^0.1.0&quot;,
    &quot;hexo-generator-tag&quot;: &quot;^0.1.0&quot;,
    &quot;hexo-renderer-ejs&quot;: &quot;^0.1.0&quot;,
    &quot;hexo-renderer-stylus&quot;: &quot;^0.2.0&quot;,
    &quot;hexo-renderer-marked&quot;: &quot;^0.2.4&quot;,
    &quot;hexo-server&quot;: &quot;^0.1.2&quot;
  }
}
</code></pre><h4 id="db-json文件"><a href="#db-json文件" class="headerlink" title="db.json文件"></a>db.json文件</h4><blockquote>
<p>该文件是缓存文件（缓存编写的md文件内容等）</p>
</blockquote>
<h4 id="scaffolds目录"><a href="#scaffolds目录" class="headerlink" title="scaffolds目录"></a>scaffolds目录</h4><blockquote>
<p>该目录存放着博文<a href="https://hexo.io/zh-cn/docs/writing.html" target="_blank" rel="external">模版</a> 。当您新建文章时，Hexo 会根据 scaffold 来建立文件。</p>
<p>Hexo的模板是指在新建的markdown文件中默认填充的内容。例如，如果您修改<code>caffold/post.md</code>中的<code>Front-matter</code>内容，那么每次新建一篇文章时都会包含这个修改。</p>
</blockquote>
<h4 id="source目录"><a href="#source目录" class="headerlink" title="source目录"></a>source目录</h4><blockquote>
<p>source资源文件夹是存放用户源资源的地方。除 <code>_posts</code> 、<code>_drafts</code>文件夹之外，开头命名为<code>_</code> (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。source目录下的<code>Markdown</code> 和<code>HTML</code>文件会被<code>hexo g</code>解析并放到在根目录下新建的 public 文件夹，而其他文件会被拷贝过去。也可以将此目录理解为类似于<code>git的工作区workpace</code></p>
</blockquote>
<pre><code>.
├── _drafts--------使用hexo new draft &quot;folder&quot;命令生成
├── _posts---------使用hexo new [post] &quot;folder&quot;命令生成,默认是post
├── about----------使用hexo new page &quot;folder&quot;命令生成
├── categories-----使用hexo new page &quot;folder&quot;命令生成    
└── tags-----------使用hexo new page &quot;folder&quot;命令生成
</code></pre><h4 id="themes目录"><a href="#themes目录" class="headerlink" title="themes目录"></a>themes目录</h4><blockquote>
<p>该目录存放<a href="https://hexo.io/zh-cn/docs/themes.html" target="_blank" rel="external">主题</a>文件夹。Hexo 会根据主题来生成静态页面。</p>
<p>在主题目录下有一个<code>_config.yml</code>配置文件，该文件是用来配置网站页面主题的相关信息</p>
</blockquote>
<h3 id="执行完hexo-generate命令后，指定folder文件夹-根目录-下的目录结构如下："><a href="#执行完hexo-generate命令后，指定folder文件夹-根目录-下的目录结构如下：" class="headerlink" title="执行完hexo generate命令后，指定folder文件夹(根目录)下的目录结构如下："></a>执行完<code>hexo generate</code>命令后，指定folder文件夹(根目录)下的目录结构如下：</h3><pre><code>.
├── _config.yml
├── package.json
|—— db.json
├── scaffolds
├── source
|   ├── _drafts
|   └── _posts
└── themes
|__ public
</code></pre><h4 id="public目录"><a href="#public目录" class="headerlink" title="public目录"></a>public目录</h4><blockquote>
<p>该目录保存使用<code>hexo generate</code>命令解析source目录得到的站点文件；也可以将该目录理解为类似于<code>git的暂存区stage</code>。此解析过程如下：</p>
<blockquote>
<p>根据根目录下的_config.yml配置文件解析根目录下的source目录中的所有内容；git来做版本控制。<br>根据theme/ThemeName/下的_config.yml配置文件解析该目录下的source目录中的所有内容；git来做版本控制。</p>
</blockquote>
</blockquote>
<h3 id="执行完hexo-deploy命令后，指定folder文件夹-根目录-下的目录结构如下："><a href="#执行完hexo-deploy命令后，指定folder文件夹-根目录-下的目录结构如下：" class="headerlink" title="执行完hexo deploy命令后，指定folder文件夹(根目录)下的目录结构如下："></a>执行完<code>hexo deploy</code>命令后，指定folder文件夹(根目录)下的目录结构如下：</h3><pre><code>.
├── _config.yml
├── package.json
|—— db.json
├── scaffolds
├── source
|   ├── _drafts
|   └── _posts
└── themes
|__ public
|__ .deploy_git
</code></pre><h4 id="deploy-git目录"><a href="#deploy-git目录" class="headerlink" title=".deploy_git目录"></a>.deploy_git目录</h4><blockquote>
<p>该目录保存<code>hexo deploy</code>命令上传到远程仓库中的文件内容，即将远程仓库中的全部文件内容备份在本地，类似于<code>git的本地仓库</code>。</p>
</blockquote>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="根目录下的-config-yml文件配置"><a href="#根目录下的-config-yml文件配置" class="headerlink" title="根目录下的_config.yml文件配置"></a>根目录下的<code>_config.yml</code>文件配置</h3><pre><code>该配置文件是用来配置网站的整体信息
</code></pre><h4 id="网站配置"><a href="#网站配置" class="headerlink" title="网站配置"></a>网站配置</h4><p><img src="1.png" alt=""></p>
<blockquote>
<p>其中，<code>description</code>主要用于<a href="">SEO</a>，告诉搜索引擎一个关于您站点的简单描述，通常建议在其中包含您网站的关键词。</p>
</blockquote>
<h4 id="网址配置"><a href="#网址配置" class="headerlink" title="网址配置"></a>网址配置</h4><p><img src="2.png" alt=""></p>
<blockquote>
<p><strong>网站存放在子目录</strong><br>如果您的网站存放在子目录中，例如 <code>http://yoursite.com/blog</code>，则请将您的 <code>url</code> 设为 <code>http://yoursite.com/blog</code> 并把 <code>root</code> 设为 <code>/blog/</code>。</p>
</blockquote>
<h4 id="目录配置"><a href="#目录配置" class="headerlink" title="目录配置"></a>目录配置</h4><p><img src="3.png" alt=""></p>
<blockquote>
<p>详细的的globbing通配机制请见：<a href="">globbing详解</a></p>
</blockquote>
<h4 id="文章配置"><a href="#文章配置" class="headerlink" title="文章配置"></a>文章配置</h4><p><img src="4.png" alt=""></p>
<blockquote>
<p>默认情况下，Hexo生成的超链接都是绝对地址。例如，如果您的网站域名为<code>example.com</code>,您有一篇文章名为<code>hello</code>，那么绝对链接可能像这样：<code>http://example.com/hello.html</code>，它是绝对于域名的。相对链接像这样：<code>/hello.html</code>，也就是说，无论用什么域名访问该站点，都没有关系，这在进行反向代理时可能用到。通常情况下，建议使用绝对地址。</p>
<p><strong>启动Asset文件夹</strong><br>资源（Asset）代表<code>source</code> 文件夹中除了文章以外的所有文件，例如图片、CSS、JS 文件等。比方说，如果你的Hexo项目中只有少量图片，那最简单的方法就是将它们放在<code>source/images</code>文件夹中。然后通过类似于 <code>![](/images/image.jpg)</code> 的方法访问它们。下面会详细介绍</p>
</blockquote>
<h4 id="分类-amp-标签配置"><a href="#分类-amp-标签配置" class="headerlink" title="分类 &amp; 标签配置"></a>分类 &amp; 标签配置</h4><p><img src="5.png" alt=""></p>
<h4 id="日期-时间格式配置"><a href="#日期-时间格式配置" class="headerlink" title="日期/时间格式配置"></a>日期/时间格式配置</h4><blockquote>
<p>Hexo 使用<a href="http://momentjs.com/" target="_blank" rel="external">Moment.js</a> 来解析和显示时间。</p>
</blockquote>
<p><img src="6.png" alt=""></p>
<h4 id="分页配置"><a href="#分页配置" class="headerlink" title="分页配置"></a>分页配置</h4><p><img src="7.png" alt=""></p>
<h4 id="扩展配置"><a href="#扩展配置" class="headerlink" title="扩展配置"></a>扩展配置</h4><p><img src="8.png" alt=""></p>
<h3 id="主题目录下-config-yml文件配置"><a href="#主题目录下-config-yml文件配置" class="headerlink" title="主题目录下_config.yml文件配置"></a>主题目录下<code>_config.yml</code>文件配置</h3><pre><code>该配置文件主要是用来配置根目录下`_config.yml`配置文件中的theme参数。实现自定义网页主题
</code></pre><blockquote>
<p><a href="">yelee主题</a></p>
<p><a href="">NexT主题</a></p>
</blockquote>
<h2 id="迁移"><a href="#迁移" class="headerlink" title="迁移"></a>迁移</h2><h3 id="RSS"><a href="#RSS" class="headerlink" title="RSS"></a>RSS</h3><blockquote>
<p>首先，安装<code>hexo-migrator-rss</code> 插件</p>
</blockquote>
<pre><code>$ npm install hexo-migrator-rss --save
</code></pre><blockquote>
<p>插件安装完成后，执行下列命令，从 <code>RSS</code> 迁移所有文章。<code>source</code> 可以是文件路径或网址。</p>
</blockquote>
<pre><code>$ hexo migrate rss &lt;source&gt;
</code></pre><h3 id="Jekyll"><a href="#Jekyll" class="headerlink" title="Jekyll"></a>Jekyll</h3><blockquote>
<p>把 <code>_posts</code> 文件夹内的所有文件复制到 <code>source/_posts</code> 文件夹，并在<code>_config.yml</code>中修改 <code>new_post_name</code> 参数。</p>
</blockquote>
<pre><code>new_post_name: :year-:month-:day-:title.md
</code></pre><h3 id="Octopress"><a href="#Octopress" class="headerlink" title="Octopress"></a>Octopress</h3><blockquote>
<p>把<code>Octopress source/_posts</code>文件夹内的所有文件转移到 Hexo 的<code>source/_posts</code>文件夹，并修改 <code>_config.yml</code> 中的 <code>new_post_name</code>参数。</p>
</blockquote>
<pre><code>new_post_name: :year-:month-:day-:title.md
</code></pre><h3 id="WordPress"><a href="#WordPress" class="headerlink" title="WordPress"></a>WordPress</h3><blockquote>
<p>首先，安装 <code>hexo-migrator-wordpress</code>插件。</p>
</blockquote>
<pre><code>$ npm install hexo-migrator-wordpress --save
</code></pre><blockquote>
<p>在 WordPress 仪表盘中导出数据(“Tools” → “Export” → “WordPress”)（详情参考<a href="http://en.support.wordpress.com/export/" target="_blank" rel="external">WP支持页面</a>）。</p>
<p>插件安装完成后，执行下列命令来迁移所有文章。<code>source</code>可以是 WordPress 导出的文件路径或网址。</p>
</blockquote>
<pre><code>$ hexo migrate wordpress &lt;source&gt;
</code></pre><blockquote>
<p><strong>注意</strong><br>这个插件并不能完美地实现WordPress-&gt;Hexo的数据转换，尤其是在处理WordPress的分类方面存在问题（见<a href="https://hexo.io/zh-cn/docs/front-matter.html" target="_blank" rel="external">Front-matter中的分类与标签</a>）。因此，建议您在迁移完成后，手工审阅所有生成的markdown文件，检查其中是否有错误。对于文章数量较大的WordPress站点，这项工作可能要花很长的时间。</p>
</blockquote>
<h3 id="Joomla"><a href="#Joomla" class="headerlink" title="Joomla"></a>Joomla</h3><blockquote>
<p>首先，安装 <code>hexo-migrator-joomla</code> 插件。</p>
</blockquote>
<pre><code>$ npm install hexo-migrator-joomla --save
</code></pre><blockquote>
<p>使用 <a href="http://extensions.joomla.org/extensions/migration-a-conversion/data-import-a-export/12816?qh=YToxOntpOjA7czo1OiJqMnhtbCI7fQ%3D%3D" target="_blank" rel="external">J2XML</a> 组件导出 Joomla 文章。</p>
<p>插件安装完成后，执行下列命令来迁移所有文章。<code>source</code>可以是 Joomla 导出的文件路径或网址。</p>
</blockquote>
<pre><code>$ hexo migrate joomla &lt;source&gt;
</code></pre><h1 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h1><h2 id="文档生成"><a href="#文档生成" class="headerlink" title="文档生成"></a>文档生成</h2><blockquote>
<p>执行下列命令来创建一篇新文章</p>
</blockquote>
<pre><code>$ hexo new [layout] &lt;title&gt;
</code></pre><h3 id="布局（Layout）"><a href="#布局（Layout）" class="headerlink" title="布局（Layout）"></a>布局（Layout）</h3><blockquote>
<p>hexo通过layout来指定文章的布局，layout有三个值：<code>post</code>、<code>page</code>、<code>draft</code>。当命令中不带layout时，可以通过修改 <code>_config.yml</code> 中的 <code>default_layout</code> 参数值来指定默认布局，默认是<code>post</code></p>
</blockquote>
<p><strong>1.指定不同的面页布局模式，其生成的文件分别存放在不同的路径下，如下：</strong></p>
<p><img src="13.png" alt=""></p>
<p><strong>2.指定不同的面页布局模式，hexo会根据 <code>scaffolds</code> 文件夹内相对应的文件的Front-matter区域来建立文件(按照模板初始化文件)</strong></p>
<pre><code>布局            对应模板文件
post         scaffolds/post.md
page         scaffolds/page.md
draft         scaffolds/draft.md
</code></pre><p><strong>2.1 模板中可使用的参数变量(Front-matter区域)如下：</strong></p>
<p><img src="15.png" alt=""></p>
<blockquote>
<p>上述参数变量所在的区域文件最上方以<code>---</code>分隔的区域,也叫做<code>Front-matter</code>，用来指定文章显示的相关属性</p>
</blockquote>
<p><strong>2.2 分类和标签</strong></p>
<blockquote>
<p>只有文章支持分类和标签，您可以在 <code>Front-matter</code>中设置。在其他系统中，分类和标签听起来很接近，但是在 Hexo 中两者有着明显的差别：分类具有顺序性和层次性，也就是说 <code>Foo, Bar</code> 不等于 <code>Bar, Foo</code>；而标签没有顺序和层次。</p>
</blockquote>
<pre><code>categories:
- Diary
tags:
- PS3
- Games
</code></pre><blockquote>
<p><strong>分类方法的分歧</strong><br>如果您有过使用<code>WordPress</code>的经验，就很容易误解Hexo的分类方式。WordPress支持对一篇文章设置多个分类，而且这些分类可以是同级的，也可以是父子分类。但是Hexo不支持指定多个同级分类。下面的指定方法：</p>
<p>categories:</p>
<ul>
<li>Diary</li>
<li>Life</li>
</ul>
<p>会使分类<code>Life</code>成为<code>Diary</code>的子分类，而不是并列分类。因此，有必要为您的文章选择尽可能准确的分类。</p>
</blockquote>
<p><strong>2.3 JSON Front-matter</strong></p>
<blockquote>
<p>除了 <code>YAML</code>模式外，<code>Front-matter</code>区域也可以使用 <code>JSON</code>模式 来编写，只要将 <code>---</code> 代换成 <code>;;;</code> 即可。</p>
</blockquote>
<pre><code>&quot;title&quot;: &quot;Hello World&quot;,
&quot;date&quot;: &quot;2013/7/13 20:46:25&quot;
;;;
</code></pre><blockquote>
<p><em>不要处理我的文章</em><br>如果你不想你的文章被处理，你可以将 <code>Front-Matter</code>中的<code>layout</code>: 设为 <code>false</code> 。</p>
</blockquote>
<h3 id="文件名称-title"><a href="#文件名称-title" class="headerlink" title="文件名称(title)"></a>文件名称(title)</h3><blockquote>
<p>Hexo 默认以标题做为文件名称，但您可编辑 <code>_config.yml</code> 中的<code>new_post_name</code> 参数来改变默认的文件名称，举例来说，设为<code>:year-:month-:day-:title.md</code> 可让您更方便的通过日期来管理文章</p>
</blockquote>
<p><img src="14.png" alt=""></p>
<h3 id="草稿-draft"><a href="#草稿-draft" class="headerlink" title="草稿(draft)"></a>草稿(draft)</h3><blockquote>
<p>刚刚提到了 Hexo 的一种特殊布局：<code>draft</code>，该布局在建立时会被保存到 source/_drafts 文件夹，不会显示在页面中，可在执行时加上 <code>--draft</code> 参数，或是把  <code>_config.yml</code> 中的<code>render_drafts</code> 参数设为 <code>true</code> 来预览草稿</p>
</blockquote>
<pre><code>$ hexo new draft &lt;title&gt; --draft
</code></pre><blockquote>
<p>也可通过 <code>publish</code> 命令将草稿移动到 <code>source/_posts</code> 文件夹中预览草稿，该命令的使用方式与 new 十分类似，您也可在命令中指定 <code>layout</code> 来指定布局。</p>
</blockquote>
<pre><code>$ hexo publish [layout] &lt;title&gt;
</code></pre><h2 id="编辑文档"><a href="#编辑文档" class="headerlink" title="编辑文档"></a>编辑文档</h2><h3 id="Markdown语法"><a href="#Markdown语法" class="headerlink" title="Markdown语法"></a>Markdown语法</h3><blockquote>
<p>详细的Markdown语法使用请见<a href="">Markdown语法</a></p>
</blockquote>
<h3 id="标签插件（Tag-Plugins）"><a href="#标签插件（Tag-Plugins）" class="headerlink" title="标签插件（Tag Plugins）"></a>标签插件（Tag Plugins）</h3><blockquote>
<p>标签插件和 <code>Front-matter</code> 中的标签不同，它们是用于在文章中快速插入特定形式内容的插件,而后者只是用来指定文章显示的相关属性</p>
<p>使用插件标签之前需要使用<code>npm install</code>命令安装<a href="https://hexo.io/plugins/" target="_blank" rel="external">对应插件1</a>或<a href="https://www.npmjs.com/package/" target="_blank" rel="external">对应插件2</a></p>
<p>已安装的插件信息也可以在<code>package.json</code>文件中查看</p>
</blockquote>
<h4 id="双标签"><a href="#双标签" class="headerlink" title="双标签"></a>双标签</h4><h5 id="引用块"><a href="#引用块" class="headerlink" title="引用块"></a>引用块</h5><blockquote>
<p>在文章中插入引言，可包含作者、来源和标题。</p>
</blockquote>
<pre><code>{% blockquote [author[, source]] [link] [source_link_title] %}
	content
	{% endblockquote %}
</code></pre><p><strong>1.没有提供参数，则只输出普通的 blockquote</strong></p>
<pre><code>{% blockquote %}
	Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem.
	{% endblockquote %}
</code></pre><blockquote>
<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem.</p>
</blockquote>
<p><strong>2.引用书上的句子</strong><br>    <blockquote><p>Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.</p>
<footer><strong>David Levithan</strong><cite>Wide Awake</cite></footer></blockquote></p>
<blockquote>
<p>Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.</p>
<p><strong><em>David Levithan</em></strong>——Wide Awake</p>
</blockquote>
<p><strong>3.引用 Twitter</strong><br>    <blockquote><p>NEW: DevDocs now comes with syntax highlighting. <a href="http://devdocs.io" target="_blank" rel="external">http://devdocs.io</a></p>
<footer><strong>@DevDocs</strong><cite><a href="https://twitter.com/devdocs/status/356095192085962752" target="_blank" rel="external">twitter.com/devdocs/status/356095192085962752</a></cite></footer></blockquote></p>
<blockquote>
<p>NEW: DevDocs now comes with syntax highlighting. <a href="http://devdocs.io" target="_blank" rel="external">http://devdocs.io</a></p>
<p>@DevDocs——<a href="https://twitter.com/devdocs/status/3560951920859627522" target="_blank" rel="external">twitter.com/devdocs/status/356095192085962752</a></p>
</blockquote>
<p><strong>4.引用网络上的文章</strong><br>    <blockquote><p>Every interaction is both precious and an opportunity to delight.</p>
<footer><strong>Seth Godin</strong><cite><a href="http://sethgodin.typepad.com/seths_blog/2009/07/welcome-to-island-marketing.html" target="_blank" rel="external">Welcome to Island Marketing</a></cite></footer></blockquote></p>
<blockquote>
<p>Every interaction is both precious and an opportunity to delight.</p>
<p>Seth Godin——<a href="http://sethgodin.typepad.com/seths_blog/2009/07/welcome-to-island-marketing.htm" target="_blank" rel="external">Welcome to Island Marketing</a></p>
</blockquote>
<h5 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h5><blockquote>
<p>在文章中插入代码</p>
<p>形式一：</p>
</blockquote>
<pre><code>{% codeblock [title] [lang:language] [url] [link text] %}
	code snippet
	{% endcodeblock %}
</code></pre><blockquote>
<p>形式二：</p>
</blockquote>
<pre><code>``` [language] [title] [url] [link text] code snippet ```
</code></pre><p><strong>1.普通的代码块</strong><br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">alert(&apos;Hello World!&apos;);</div></pre></td></tr></table></figure></p>
<blockquote>
<p><code>alert(&#39;Hello World!&#39;);</code></p>
</blockquote>
<p><strong>2.指定语言</strong><br><img src="16.png" alt=""><br><strong>3.附加说明</strong><br><img src="17.png" alt=""><br><strong>4.附加说明和网址</strong><br><img src="18.png" alt=""></p>
<h5 id="Pull-Quote"><a href="#Pull-Quote" class="headerlink" title="Pull Quote"></a>Pull Quote</h5><blockquote>
<p>在文章中插入 Pull quote。</p>
</blockquote>
<pre><code>{% pullquote [class] %}
	content
	{% endpullquote %}
</code></pre><h5 id="Raw"><a href="#Raw" class="headerlink" title="Raw"></a>Raw</h5><blockquote>
<p>如果您想在文章中插入<code>Swig</code> 标签，可以尝试使用 <code>Raw</code> 标签，以免发生解析异常。</p>
</blockquote>
<pre><code>{% raw %}
	content
	{% endraw %}
</code></pre><h4 id="单标签"><a href="#单标签" class="headerlink" title="单标签"></a>单标签</h4><h5 id="jsFiddle"><a href="#jsFiddle" class="headerlink" title="jsFiddle"></a>jsFiddle</h5><blockquote>
<p>在文章中嵌入 jsFiddle。</p>
</blockquote>
<pre><code>{% jsfiddle shorttag [tabs] [skin] [width] [height] %}
</code></pre><h5 id="Gist"><a href="#Gist" class="headerlink" title="Gist"></a>Gist</h5><blockquote>
<p>在文章中嵌入 Gist。</p>
</blockquote>
<pre><code>{% gist gist_id [filename] %}
</code></pre><h5 id="iframe"><a href="#iframe" class="headerlink" title="iframe"></a>iframe</h5><blockquote>
<p>在文章中插入 iframe。</p>
</blockquote>
<pre><code>{% iframe url [width] [height] %}
</code></pre><h5 id="Image"><a href="#Image" class="headerlink" title="Image"></a>Image</h5><blockquote>
<p>在文章中插入指定大小的图片。</p>
</blockquote>
<pre><code>{% img [class names] /path/to/image [width] [height] [title text [alt text]] %}
</code></pre><h5 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h5><blockquote>
<p>在文章中插入链接，并自动给外部链接添加 target=”_blank” 属性。</p>
</blockquote>
<pre><code>{% link text url [external] [title] %}
</code></pre><h5 id="Include-Code"><a href="#Include-Code" class="headerlink" title="Include Code"></a>Include Code</h5><blockquote>
<p>插入 <code>source</code>文件夹内的代码文件。</p>
</blockquote>
<pre><code>{% include_code [title] [lang:language] path/to/file %}
</code></pre><h5 id="Youtube"><a href="#Youtube" class="headerlink" title="Youtube"></a>Youtube</h5><blockquote>
<p>在文章中插入 Youtube 视频。</p>
</blockquote>
<pre><code>{% youtube video_id %}
</code></pre><h5 id="Vimeo"><a href="#Vimeo" class="headerlink" title="Vimeo"></a>Vimeo</h5><blockquote>
<p>在文章中插入 Vimeo 视频。</p>
</blockquote>
<pre><code>{% vimeo video_id %}
</code></pre><h5 id="引用文章"><a href="#引用文章" class="headerlink" title="引用文章"></a>引用文章</h5><blockquote>
<p>引用其他文章的链接。</p>
</blockquote>
<pre><code>{% post_path slug %}
{% post_link slug [title] %}
</code></pre><h5 id="引用资源"><a href="#引用资源" class="headerlink" title="引用资源"></a>引用资源</h5><blockquote>
<p>引用文章的资源。</p>
</blockquote>
<pre><code>{% asset_path slug %}
{% asset_img slug [title] %}
{% asset_link slug [title] %}
</code></pre><h3 id="资源文件夹"><a href="#资源文件夹" class="headerlink" title="资源文件夹"></a>资源文件夹</h3><blockquote>
<p>资源（Asset）文件夹代表 source 文件夹中除了文章以外的所有文件，例如<code>图片</code>、<code>CSS</code>、<code>JS</code> 文件等。具体的使用方法如下：</p>
</blockquote>
<h4 id="简单化管理较少资源"><a href="#简单化管理较少资源" class="headerlink" title="简单化管理较少资源"></a>简单化管理较少资源</h4><blockquote>
<p>例如：Hexo项目中只有少量图片，那最简单的方法就是将它们放在 <code>source/images</code> 文件夹中。然后通过类似于 <code>![](/images/image.jpg)</code>的方法访问它们。</p>
</blockquote>
<h4 id="组织化管理较多资源"><a href="#组织化管理较多资源" class="headerlink" title="组织化管理较多资源"></a>组织化管理较多资源</h4><blockquote>
<p>该方法可以有规律地提供图片和其他资源以及想要将他们的资源分布在各个文章上</p>
</blockquote>
<p><strong>1.将<code>config.yml</code>文件中的<code>post_asset_folder</code>选项设为<code>true</code>来打开。</strong></p>
<pre><code>_config.yml
post_asset_folder: true
</code></pre><blockquote>
<p>当资源文件管理功能打开后，Hexo将会在你每一次通过 hexo new [layout] <title> 命令创建新文章时自动创建一个文件夹到相同目录下。这个资源文件夹将会有与这个 markdown 文件一样的名字。将所有与你的文章有关的资源放在这个关联文件夹中之后，你可以通过相对路径来引用它们，这样你就得到了一个更简单而且方便得多的工作流。</title></p>
</blockquote>
<p><strong>2.将要引用的资源放到上述生成的资源文件夹中</strong><br><strong>3.使用相对路径引用资源</strong></p>
<blockquote>
<p>方法一：通过常规的 markdown 语法和相对路径来引用图片和其它资源</p>
</blockquote>
<pre><code>![](/example.jpg) 
</code></pre><blockquote>
<p>方法二：使用插件标签和相对路径来引用图片和其它资源</p>
</blockquote>
<ol>
<li><p>使用<code>npm install</code>命令安装<a href="https://hexo.io/plugins/" target="_blank" rel="external">对应插件1</a>或<a href="https://www.npmjs.com/package/" target="_blank" rel="external">对应插件2</a></p>
<pre><code>$npm install hexo-asset-image 
</code></pre></li>
<li>使用对应的插件标签和相对路径进行引用</li>
</ol>
<pre><code>        {% asset_path slug %}
        {% asset_img slug [title] %}
        {% asset_link slug [title] %}
例如：{% asset_img example.jpg This is an example image %}
</code></pre><h3 id="数据文件夹"><a href="#数据文件夹" class="headerlink" title="数据文件夹"></a>数据文件夹</h3><blockquote>
<p>有时您可能需要在主题中使用某些资料，而这些资料并不在文章内，并且是需要重复使用的，那么您可以考虑使用 Hexo 3.0 新增的「数据文件」功能。此功能会载入<code>source/_data</code>内的<code>YAML</code>或<code>JSON</code> 文件，如此一来您便能在网站中复用这些文件了。</p>
<p>举例来说，在 source/_data 文件夹中新建 menu.yml 文件：</p>
</blockquote>
<pre><code>Home: /
Gallery: /gallery/
Archives: /archives/
</code></pre><blockquote>
<p>您就能在模板中使用这些资料：</p>
</blockquote>
<pre><code>{% for link in site.data.menu %}
	   <a href="{{ link }}">{{ loop.key }}</a>
	{% endfor %}
</code></pre><h2 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h2><blockquote>
<p>hexo使用下列命令快速且简单地生成静态文件</p>
</blockquote>
<pre><code>$ hexo generate
</code></pre><h3 id="监视文件变动"><a href="#监视文件变动" class="headerlink" title="监视文件变动"></a>监视文件变动</h3><blockquote>
<p>Hexo 能够监视文件变动并立即重新生成静态文件，在生成时会比对文件的 <code>SHA1 checksum</code>，只有变动的文件才会写入。</p>
</blockquote>
<pre><code>$ hexo generate --watch
</code></pre><h3 id="完成后部署"><a href="#完成后部署" class="headerlink" title="完成后部署"></a>完成后部署</h3><blockquote>
<p>执行下列的其中一个命令，可以让Hexo在生成完毕后自动上传部署网站，两个命令的作用是相同的。</p>
</blockquote>
<pre><code>$ hexo generate --deploy
$ hexo deploy --generate
</code></pre><blockquote>
<p><strong>简写</strong><br>上面两个命令可以简写为</p>
<p>$ hexo g -d</p>
<p>$ hexo d -g</p>
</blockquote>
<h2 id="开启本地服务器预览"><a href="#开启本地服务器预览" class="headerlink" title="开启本地服务器预览"></a>开启本地服务器预览</h2><h3 id="Hexo服务器"><a href="#Hexo服务器" class="headerlink" title="Hexo服务器"></a>Hexo服务器</h3><blockquote>
<p>Hexo 3.0 把服务器独立成了个别模块，您必须先安装<a href="https://github.com/hexojs/hexo-server" target="_blank" rel="external">hexo-server</a>才能使用。具体使用方法如下：</p>
</blockquote>
<h4 id="安装hexo-server"><a href="#安装hexo-server" class="headerlink" title="安装hexo-server"></a>安装<code>hexo-server</code></h4><pre><code>$ npm install hexo-server --save
</code></pre><h4 id="启动服务器"><a href="#启动服务器" class="headerlink" title="启动服务器"></a>启动服务器</h4><pre><code>$ hexo server
</code></pre><h4 id="本地预览静态网页"><a href="#本地预览静态网页" class="headerlink" title="本地预览静态网页"></a>本地预览静态网页</h4><blockquote>
<p>网站会在<code>http://localhost:4000</code> 下启动,在浏览器中输入上述链接可直接预览。在服务器启动期间，Hexo 会监视文件变动并自动更新，无须重启服务器。 </p>
<p>如果您想要更改端口，或是在执行时遇到了 <code>EADDRINUSE</code> 错误，可以在执行时使用 <code>-p</code>选项指定其他端口，如下：</p>
</blockquote>
<pre><code>$ hexo server -p 5000
</code></pre><h4 id="命令可用选项"><a href="#命令可用选项" class="headerlink" title="命令可用选项"></a>命令可用选项</h4><h5 id="静态模式"><a href="#静态模式" class="headerlink" title="静态模式"></a>静态模式</h5><blockquote>
<p>在静态模式下，服务器只处理 <code>public</code> 文件夹内的文件，而不会处理文件变动，在执行时，您应该先自行执行 <code>hexo generate</code>，此模式通常用于生产环境（<code>production mode</code>）下。</p>
</blockquote>
<pre><code>$ hexo server -s
</code></pre><h5 id="自定义IP"><a href="#自定义IP" class="headerlink" title="自定义IP"></a>自定义IP</h5><blockquote>
<p>服务器默认运行在 <code>0.0.0.0</code>，您可以覆盖默认的 IP 设置，如下：</p>
</blockquote>
<pre><code>$ hexo server -i 192.168.1.1
</code></pre><blockquote>
<p>指定这个参数后，您就只能通过该IP才能访问站点。例如，对于一台使用无线网络的笔记本电脑，除了指向本机的<code>127.0.0.1</code>外，通常还有一个<code>192.168.*.*</code>的局域网IP，如果像上面那样使用<code>-i</code>参数，就不能用<code>127.0.0.1</code>来访问站点了。对于有公网IP的主机，如果您指定一个局域网IP作为<code>-i</code>参数的值，那么就无法通过公网来访问站点。</p>
</blockquote>
<h3 id="Pow服务器"><a href="#Pow服务器" class="headerlink" title="Pow服务器"></a>Pow服务器</h3><blockquote>
<p><a href="http://pow.cx/" target="_blank" rel="external">Pow</a> 是一个 Mac 系统上的零配置 Rack 服务器，它也可以作为一个简单易用的静态文件服务器来使用。</p>
</blockquote>
<h4 id="安装pow服务器"><a href="#安装pow服务器" class="headerlink" title="安装pow服务器"></a>安装pow服务器</h4><pre><code>$ curl get.pow.cx | sh
</code></pre><h4 id="设置启动服务器"><a href="#设置启动服务器" class="headerlink" title="设置启动服务器"></a>设置启动服务器</h4><blockquote>
<p>在 <code>~/.pow</code>文件夹建立链接（symlink）。</p>
</blockquote>
<pre><code>$ cd ~/.pow
$ ln -s /path/to/myapp
</code></pre><h4 id="本地预览静态网页-1"><a href="#本地预览静态网页-1" class="headerlink" title="本地预览静态网页"></a>本地预览静态网页</h4><blockquote>
<p>开启服务器后生成的静态网站将会在 <code>http://myapp.dev</code>下运行，网址根据链接名称而定</p>
</blockquote>
<h2 id="上传部署静态文件"><a href="#上传部署静态文件" class="headerlink" title="上传部署静态文件"></a>上传部署静态文件</h2><blockquote>
<p>Hexo 提供了快速方便的一键部署功能，让您只需一条命令<code>hexo deploy</code>就能将网站部署到远程服务器上；不同部署工具的部署配置各不相同，实际情况如下：</p>
</blockquote>
<h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h3><blockquote>
<p>1.安装<a href="https://github.com/hexojs/hexo-deployer-git" target="_blank" rel="external">hexo-deployer-git插件</a></p>
</blockquote>
<pre><code>$ npm install hexo-deployer-git --save
</code></pre><blockquote>
<p>2.编辑主配置文件<code>_config.yml</code>中的<code>deploy</code>项</p>
</blockquote>
<pre><code>deploy:
  type: git
  repo: &lt;repository url&gt;
  branch: [branch--master主分支]
  message: [message]
</code></pre><p><img src="19.png" alt=""></p>
<blockquote>
<p>3.一键部署</p>
</blockquote>
<pre><code>$ hexo deploy
</code></pre><h3 id="Heroku"><a href="#Heroku" class="headerlink" title="Heroku"></a>Heroku</h3><blockquote>
<p>1.安装<a href="https://github.com/hexojs/hexo-deployer-heroku" target="_blank" rel="external">hexo-deployer-heroku插件</a></p>
</blockquote>
<pre><code>$ npm install hexo-deployer-heroku --save
</code></pre><blockquote>
<p>2.编辑主配置文件<code>_config.yml</code>中的<code>deploy</code>项</p>
</blockquote>
<pre><code>deploy:
  type: heroku
  repo: &lt;repository url&gt;
  message: [message]
</code></pre><p><img src="20.png" alt=""></p>
<blockquote>
<p>3.一键部署</p>
</blockquote>
<pre><code>$ hexo deploy
</code></pre><h3 id="Rsync"><a href="#Rsync" class="headerlink" title="Rsync"></a>Rsync</h3><blockquote>
<p>1.安装<a href="https://github.com/hexojs/hexo-deployer-rsync" target="_blank" rel="external">hexo-deployer-rsync插件</a></p>
</blockquote>
<pre><code>$ npm install hexo-deployer-rsync --save
</code></pre><blockquote>
<p>2.编辑主配置文件<code>_config.yml</code>中的<code>deploy</code>项</p>
</blockquote>
<pre><code>deploy:
  type: rsync
  host: &lt;host&gt;
  user: &lt;user&gt;
  root: &lt;root&gt;
  port: [port]
  delete: [true|false]
  verbose: [true|false]
  ignore_errors: [true|false]
</code></pre><p><img src="21.png" alt=""></p>
<blockquote>
<p><strong>rsync部署模块的工作方式</strong><br>需要注意的是，要求您提供的实际上是一个能通过SSH登陆远程主机的Linux用户。Hexo会自动处理关于rsync使用的一切操作。因此，您需要在远程主机上为您的Hexo站点建立一个用户，并允许其通过SSH登陆。不过，这里的<code>port</code>，的确是指rsync监听的端口，请确保防火墙打开了该端口。</p>
<p>3.一键部署</p>
</blockquote>
<pre><code>$ hexo deploy
</code></pre><h3 id="OpenShift"><a href="#OpenShift" class="headerlink" title="OpenShift"></a>OpenShift</h3><blockquote>
<p>1.安装<a href="https://github.com/hexojs/hexo-deployer-openshift" target="_blank" rel="external">hexo-deployer-openshift插件</a></p>
</blockquote>
<pre><code>$ npm install hexo-deployer-openshift --save
</code></pre><blockquote>
<p>2.编辑主配置文件<code>_config.yml</code>中的<code>deploy</code>项</p>
</blockquote>
<pre><code>deploy:
  type: openshift
  repo: &lt;repository url&gt;
  message: [message]
</code></pre><p><img src="22.png" alt=""></p>
<blockquote>
<p>3.一键部署</p>
</blockquote>
<pre><code>$ hexo deploy
</code></pre><h3 id="FTPSync"><a href="#FTPSync" class="headerlink" title="FTPSync"></a>FTPSync</h3><blockquote>
<p>1.安装<a href="https://github.com/hexojs/hexo-deployer-ftpsync" target="_blank" rel="external">hexo-deployer-ftpsync插件</a></p>
</blockquote>
<pre><code>$ npm install hexo-deployer-ftpsync --save
</code></pre><blockquote>
<p>2.编辑主配置文件<code>_config.yml</code>中的<code>deploy</code>项</p>
</blockquote>
<pre><code>deploy:
  type: ftpsync
  host: &lt;host&gt;
  user: &lt;user&gt;
  pass: &lt;password&gt;
  remote: [remote]
  port: [port]
  ignore: [ignore]
  connections: [connections]
  verbose: [true|false]
</code></pre><p><img src="23.png" alt=""></p>
<blockquote>
<p><strong>FTP部署可能出现的问题</strong><br>您可能需要预先通过其他方式将所有文件上传到远程主机中。否则初次使用<code>ftpsync</code>插件就可能出现报错。另外，由于FTP协议的特征，它每传送一个文件就需要一次握手，相对速度较慢。</p>
<p>3.一键部署</p>
</blockquote>
<pre><code>$ hexo deploy
</code></pre><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><h4 id="配置多个deployer"><a href="#配置多个deployer" class="headerlink" title="配置多个deployer"></a>配置多个deployer</h4><blockquote>
<p>主配置文件<code>_config.yml</code>中的<code>deploy</code>项可以同时配置多个 deployer部署器，Hexo 会依照顺序执行每个 deployer。</p>
</blockquote>
<pre><code>deploy:
- type: git
  repo:
- type: heroku
  repo:
</code></pre><blockquote>
<p><strong>缩进</strong><br>YAML依靠缩进来确定元素间的从属关系。因此，请确保每个deployer的缩进长度相同，并且使用空格缩进。</p>
</blockquote>
<h4 id="其他部署方法"><a href="#其他部署方法" class="headerlink" title="其他部署方法"></a>其他部署方法</h4><blockquote>
<p>Hexo 生成的所有文件都放在<code>public</code>文件夹中，您可以将它们复制到您喜欢的地方。</p>
</blockquote>
<h1 id="自定义"><a href="#自定义" class="headerlink" title="自定义"></a>自定义</h1><h2 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h2><h3 id="独自自建主题并发布"><a href="#独自自建主题并发布" class="headerlink" title="独自自建主题并发布"></a>独自自建主题并发布</h3><h4 id="创建Hexo主题"><a href="#创建Hexo主题" class="headerlink" title="创建Hexo主题"></a>创建Hexo主题</h4><blockquote>
<p>创建 Hexo 主题非常容易，您只要在<code>themes</code>文件夹内，新增一个任意名称的文件夹，并修改 <code>_config.yml</code> 内的 <code>theme</code> 设定，即可切换主题。一个主题可能会有以下的结构：</p>
</blockquote>
<pre><code>.
├── _config.yml
├── languages
├── layout
├── scripts
└── source
</code></pre><h5 id="config-yml文件-1"><a href="#config-yml文件-1" class="headerlink" title="config.yml文件"></a>config.yml文件</h5><blockquote>
<p>主题的配置文件。修改时会自动更新，无需重启服务器。</p>
</blockquote>
<h5 id="languages文件夹"><a href="#languages文件夹" class="headerlink" title="languages文件夹"></a>languages文件夹</h5><blockquote>
<p>若要让您的网站以不同语言呈现，您可使用国际化（internationalization）功能；具体实现方法如下：</p>
</blockquote>
<p><strong>1.先在<code>_config.yml</code>中调整 <code>language</code> 设定，这代表的是预设语言，您也可设定多个语言来调整预设语言的顺位,如下：</strong></p>
<pre><code>language: zh-tw
language: 
- zh-tw
- en
</code></pre><p><strong>2.编写语言文件</strong></p>
<blockquote>
<p>语言文件可以使用<code>YAML</code> 或 <code>JSON</code>编写，并放在主题文件夹中的 <code>languages</code> 文件夹。您可以在语言文件中使用 <a href="https://github.com/alexei/sprintf.js" target="_blank" rel="external">printf 格式</a></p>
</blockquote>
<p><em>2.1 模板</em></p>
<blockquote>
<p>在模板中，透过 <code>__</code>或<code>_p</code> 辅助函数，即可取得翻译后的字符串，前者用于一般使用；而后者用于复数字符串。例如：</p>
</blockquote>
<p><img src="26.png" alt=""><br><em>2.2 指定语言识别方式</em></p>
<blockquote>
<p>可在<code>front-matter</code>中指定该页面的语言，也可在 <code>_config.yml</code>中修改<code>i18n_dir</code> 设定，让 Hexo 自动侦测。</p>
</blockquote>
<pre><code>i18n_dir: :lang
</code></pre><blockquote>
<p><code>i18n_dir</code>的预设值是<code>:lang</code>，也就是说 Hexo 会捕获网址中的第一段以检测语言，举例来说：</p>
</blockquote>
<pre><code>/index.html =&gt; en
/archives/index.html =&gt; en
/zh-tw/index.html =&gt; zh-tw
</code></pre><blockquote>
<p>捕获到的字符串唯有在语言文件存在的情况下，才会被当作是语言，因此例二<code>/archives/index.html</code>中的 <code>archives</code>就不被当成是语言。</p>
</blockquote>
<h5 id="layout文件夹"><a href="#layout文件夹" class="headerlink" title="layout文件夹"></a>layout文件夹</h5><blockquote>
<p>布局文件夹。用于存放主题的模板文件，决定了网站内容的呈现方式，Hexo 内建 <a href="http://paularmstrong.github.com/swig/" target="_blank" rel="external">Swig</a>模板引擎，您可以另外安装插件来获得 <a href="https://github.com/hexojs/hexo-renderer-ejs" target="_blank" rel="external">EJS</a>、<a href="https://github.com/hexojs/hexo-renderer-haml" target="_blank" rel="external">Haml</a> 或 <a href="https://github.com/hexojs/hexo-renderer-jade" target="_blank" rel="external">Jade</a> 支持，Hexo 根据模板文件的扩展名来决定所使用的模板引擎，例如：</p>
</blockquote>
<pre><code>layout.ejs   - 使用 EJS
layout.swig  - 使用 Swig
</code></pre><blockquote>
<p>您可参考<code>下面的模板简介</code>以获得更多信息。</p>
</blockquote>
<h5 id="scripts文件夹"><a href="#scripts文件夹" class="headerlink" title="scripts文件夹"></a>scripts文件夹</h5><blockquote>
<p>脚本文件夹。在启动时，Hexo 会载入此文件夹内的<code>JavaScript</code> 文件，请参见下面的<code>插件介绍</code>以获得更多信息。</p>
</blockquote>
<h5 id="source文件夹"><a href="#source文件夹" class="headerlink" title="source文件夹"></a>source文件夹</h5><blockquote>
<p>资源文件夹，除了模板以外的 <code>Asset</code>，例如<code>CSS</code>、<code>JavaScript</code> 文件等，都应该放在这个文件夹中。文件或文件夹开头名称为<code>_</code>（下划线线）或隐藏的文件会被忽略。</p>
<p>如果文件可以被渲染的话，会经过解析然后储存到 <code>public</code>文件夹，否则会直接拷贝到 <code>public</code> 文件夹。</p>
</blockquote>
<h4 id="发布主题"><a href="#发布主题" class="headerlink" title="发布主题"></a>发布主题</h4><blockquote>
<p>当您完成主题后，可以考虑将它发布到 <a href="https://hexo.io/themes" target="_blank" rel="external">主题列表</a>，让更多人能够使用您的主题。在发布前建议先进行 <a href="https://github.com/hexojs/hexo-theme-unit-test" target="_blank" rel="external">主题单元测试</a>，确保每一项功能都能正常使用。发布主题的步骤和<a href="https://hexo.io/zh-cn/docs/contributing.html#更新文档" target="_blank" rel="external"> 更新文档</a> 非常类似。</p>
</blockquote>
<ol>
<li>Fork <a href="https://github.com/hexojs/site" target="_blank" rel="external">hexojs/site</a></li>
<li><p>把库（repository）复制到电脑上，并安装所依赖的插件。</p>
<pre><code>$ git clone https://github.com/&lt;username&gt;/site.git
$ cd site
$ npm install
</code></pre></li>
<li><p>编辑 <code>source/_data/themes.yml</code>，在文件中新增您的主题，例如：</p>
<pre><code>- name: landscape
  description: A brand new default theme for Hexo.
  link: https://github.com/hexojs/hexo-theme-landscape
  preview: http://hexo.io/hexo-theme-landscape
  tags:
    - official
    - responsive
    - widget
    - two_column
    - one_column
</code></pre></li>
<li><p>在<code>source/themes/screenshots</code> 新增同名的截图档案，图片必须为 <code>800x500</code>的 <code>PNG</code> 文件。</p>
</li>
<li>推送（<code>push</code>）分支。</li>
<li>建立一个新的合并申请（<code>pull request</code>）并描述改动。</li>
</ol>
<h3 id="定制其他主题并使用"><a href="#定制其他主题并使用" class="headerlink" title="定制其他主题并使用"></a>定制其他主题并使用</h3><blockquote>
<p>NexT主题详解请见：<a href="">Hexo主题之NexT</a></p>
<p>yilia主题详解请见：<a href="">Hexo主题之yilia</a></p>
</blockquote>
<h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><blockquote>
<p>Hexo 有强大的插件系统，使您能轻松扩展功能而不用修改核心模块的源码</p>
</blockquote>
<h3 id="插件的类型"><a href="#插件的类型" class="headerlink" title="插件的类型"></a>插件的类型</h3><h4 id="脚本（Scripts）"><a href="#脚本（Scripts）" class="headerlink" title="脚本（Scripts）"></a>脚本（Scripts）</h4><blockquote>
<p>如果代码很简单，建议您编写脚本，您只需要把<code>JavaScript</code> 文件放到<code>scripts</code>文件夹，在启动时就会自动载入。</p>
</blockquote>
<h4 id="插件（Packages）"><a href="#插件（Packages）" class="headerlink" title="插件（Packages）"></a>插件（Packages）</h4><blockquote>
<p>如果代码较复杂，或是您想要发布到<code>NPM</code>上，建议您编写插件。首先，在 <code>node_modules</code>文件夹中建立文件夹，文件夹名称开头必须为<code>hexo-</code>，如此一来<code>Hexo</code>才会在启动时载入,否则 <code>Hexo</code>将会忽略它。</p>
</blockquote>
<h3 id="插件的使用"><a href="#插件的使用" class="headerlink" title="插件的使用"></a>插件的使用</h3><h4 id="直接安装插件"><a href="#直接安装插件" class="headerlink" title="直接安装插件"></a>直接安装插件</h4><p><strong>1.搜索自己想要的插件</strong></p>
<blockquote>
<p><a href="https://hexo.io/plugins/" target="_blank" rel="external">插件社区1</a>—官方插件库</p>
<p><a href="https://www.npmjs.com/package/package" target="_blank" rel="external">插件社区2</a>—npm社区插件库，有详细的安装配置说明</p>
</blockquote>
<p><strong>2.安装</strong></p>
<pre><code>$ npm install package
</code></pre><blockquote>
<p>如果想深入了解<code>npm软件包管理器</code>的使用请见：<a href="">软件包管理器之npm</a></p>
</blockquote>
<h4 id="自己编写插件"><a href="#自己编写插件" class="headerlink" title="自己编写插件"></a>自己编写插件</h4><p><strong>1.在 <code>node_modules</code>文件夹中建立文件夹(文件夹名称开头必须为<code>hexo-</code>，如此一来<code>Hexo</code>才会在启动时载入否则 <code>Hexo</code>将会忽略它)</strong></p>
<blockquote>
<p>文件夹内至少要包含 2 个文件：一个是主程序;另一个是 <code>package.json</code>(描述插件的用途和所依赖的插件)</p>
</blockquote>
<pre><code>.
├── index.js
└── package.json
</code></pre><blockquote>
<p><code>package.json</code>中至少要包含 <code>name</code>, <code>version</code>, <code>main</code> 属性，例如：</p>
</blockquote>
<p><img src="44.png" alt=""></p>
<p><strong>2.工具开发插件</strong></p>
<blockquote>
<p>可以使用 Hexo 提供的官方工具插件来加速开发：</p>
</blockquote>
<ul>
<li><a href="https://github.com/hexojs/hexo-fs" target="_blank" rel="external">hexo-fs</a>：文件 IO</li>
<li><a href="https://github.com/hexojs/hexo-util" target="_blank" rel="external">hexo-util</a>：工具程式</li>
<li><a href="https://github.com/hexojs/hexo-i18n" target="_blank" rel="external">hexo-i18n</a>：本地化（i18n）</li>
<li><a href="https://github.com/hexojs/hexo-pagination" target="_blank" rel="external">hexo-pagination</a>：生成分页资料</li>
</ul>
<p><strong>3.发布插件</strong></p>
<blockquote>
<p>当完成插件后，可以考虑将它发布到<a href="https://hexo.io/plugins" target="_blank" rel="external">插件列表</a>，让更多人能够使用您的插件。发布插件的步骤和<a href="https://hexo.io/zh-cn/docs/contributing.html#更新文件" target="_blank" rel="external">更新文件</a>非常类似。</p>
</blockquote>
<ol>
<li>Fork<a href="https://github.com/hexojs/site" target="_blank" rel="external">hexojs/site</a></li>
<li><p>把库（repository）复制到电脑上，并安装所依赖的插件</p>
<pre><code>$ git clone https://github.com/&lt;username&gt;/site.git
$ cd site
$ npm install
</code></pre></li>
<li><p>编辑<code>source/_data/plugins.yml</code>，在档案中新增您的插件，例如：</p>
<pre><code>- name: hexo-server
  description: Server module for Hexo.
  link: https://github.com/hexojs/hexo-server
  tags:
    - official
    - server
    - console
</code></pre></li>
<li>推送（<code>push</code>）分支</li>
<li>建立一个新的合并申请（<code>pull request</code>）并描述改动</li>
</ol>
<h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><blockquote>
<p>模板决定了网站内容的呈现方式，每个主题至少都应包含一个 <code>index</code>模板，以下是各页面相对应的模板名称：</p>
</blockquote>
<p><img src="27.png" alt=""></p>
<h3 id="布局（Layout）-1"><a href="#布局（Layout）-1" class="headerlink" title="布局（Layout）"></a>布局（Layout）</h3><blockquote>
<p>如果页面结构类似，例如两个模板都有页首（Header）和页脚（Footer），您可考虑通过「布局」让两个模板共享相同的结构。一个布局文件必须要能显示<code>body</code> 变量的内容，如此一来模板的内容才会被显示，举例来说：</p>
</blockquote>
<p><img src="28.png" alt=""></p>
<blockquote>
<p>生成</p>
</blockquote>
<p><img src="29.png" alt=""></p>
<blockquote>
<p>每个模板都默认使用 <code>layout</code> 布局，您可在 <code>front-matter</code> 指定其他布局，或是设为<code>false</code> 来关闭布局功能，您甚至可在布局中再使用其他布局来建立嵌套布局。</p>
</blockquote>
<h3 id="局部模版（Partial）"><a href="#局部模版（Partial）" class="headerlink" title="局部模版（Partial）"></a>局部模版（Partial）</h3><blockquote>
<p>局部模板让您在不同模板之间共享相同的组件，例如<code>页首（Header）</code>、<code>页脚（Footer</code>）或<code>侧边栏（Sidebar）</code>等，可利用局部模板功能分割为个别文件，让维护更加便利。举例来说：</p>
</blockquote>
<p><img src="30.png" alt=""></p>
<blockquote>
<p>生成</p>
</blockquote>
<p><img src="31.png" alt=""></p>
<blockquote>
<p>您可以在局部模板中指定局部变量并使用</p>
</blockquote>
<p><img src="32.png" alt=""></p>
<blockquote>
<p>生成</p>
</blockquote>
<p><img src="33.png" alt=""></p>
<h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><blockquote>
<p>如果您的主题太过于复杂，或是需要生成的文件量太过于庞大，可能会大幅降低性能，除了简化主题外，您可以考虑 Hexo 2.7 新增的局部缓存（Fragment Caching） 功能。</p>
<p>本功能借鉴于 <a href="http://guides.rubyonrails.org/caching_with_rails.html#fragment-caching" target="_blank" rel="external">Ruby on Rails</a>，它储存局部内容，下次便能直接使用缓存内容，可以减少文件夹查询并使生成速度更快。</p>
<p>它可用于页首、页脚、侧边栏等文件不常变动的位置，举例来说：</p>
</blockquote>
<p><img src="34.png" alt=""></p>
<blockquote>
<p>如果您使用局部模板的话，可以更简单：</p>
</blockquote>
<p><img src="35.png" alt=""></p>
<blockquote>
<p>但是，如果您开启了 <code>relative_link</code> 参数的话，请勿使用局部缓存功能，因为相对链接在每个页面可能不同。</p>
</blockquote>
<h2 id="永久链接（Permalinks）"><a href="#永久链接（Permalinks）" class="headerlink" title="永久链接（Permalinks）"></a>永久链接（Permalinks）</h2><blockquote>
<p>自定义生成的静态网页所对应的永久链接（Permalinks）步骤如下：</p>
</blockquote>
<p><strong>1.编辑主配置文件<code>_config.yml</code>中的<code>permalink_defaults</code>和<code>permalink</code>项</strong></p>
<blockquote>
<p>1.1配置<code>permalink</code>项</p>
</blockquote>
<p><img src="24.png" alt=""></p>
<blockquote>
<p>1.2配置<code>permalink_defaults</code>项</p>
<p>在<code>permalink_defaults</code> 参数下调整永久链接中各变量的默认值：</p>
</blockquote>
<pre><code>permalink_defaults:
  lang: en
</code></pre><p><strong>2.编辑每篇文章的<code>Front-matter</code>部分 </strong><br><img src="15.png" alt=""></p>
<p><strong>3.结合主配置文件<code>_config.yml</code>和<code>Front-matter</code>部分 生成永久链接</strong><br><em>示例1：</em></p>
<blockquote>
<p>假设<code>source/_posts</code>文件夹中有个<code>hello-world.md</code>，它的<code>Front-matter</code>部分包含以下内容：</p>
</blockquote>
<pre><code>title: Hello World
date: 2013-07-14 17:01:34
categories:
- foo
- bar
</code></pre><blockquote>
<p><code>_config.yml</code>文件不同的配置生成不同的永久链接，如下：</p>
</blockquote>
<p><img src="25.png" alt=""></p>
<p><em>示例2：</em></p>
<blockquote>
<p>若要建立一个多语种的网站，您可修改<code>new_post_name</code> 和<code>permalink</code>参数，如下：</p>
</blockquote>
<pre><code>new_post_name: :lang/:title.md
permalink: :lang/:title/
</code></pre><blockquote>
<p>当您建立新文章时，文章会被储存到：</p>
</blockquote>
<pre><code>$ hexo new &quot;Hello World&quot; --lang tw
# =&gt; source/_posts/tw/Hello-World.md
</code></pre><blockquote>
<p>而网址会是：</p>
</blockquote>
<pre><code>http://localhost:4000/tw/hello-world/
</code></pre><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h3 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h3><p><img src="36.png" alt=""></p>
<blockquote>
<p>Lodash 函数库详见：<a href="https://lodash.com/" target="_blank" rel="external">Lodash函数库</a></p>
</blockquote>
<h3 id="网站变量"><a href="#网站变量" class="headerlink" title="网站变量"></a>网站变量</h3><p><img src="37.png" alt=""></p>
<h3 id="页面变量"><a href="#页面变量" class="headerlink" title="页面变量"></a>页面变量</h3><h4 id="页面（page）"><a href="#页面（page）" class="headerlink" title="页面（page）"></a>页面（page）</h4><p><img src="38.png" alt=""></p>
<blockquote>
<p>Moment.js 对象详见：<a href="http://momentjs.com/" target="_blank" rel="external">Moment.js对象</a></p>
</blockquote>
<h4 id="文章-post"><a href="#文章-post" class="headerlink" title="文章 (post)"></a>文章 (post)</h4><blockquote>
<p>和 <code>page</code>布局类似，但是添加了下列变量</p>
</blockquote>
<p><img src="39.png" alt=""></p>
<h4 id="首页（index）"><a href="#首页（index）" class="headerlink" title="首页（index）"></a>首页（index）</h4><p><img src="40.png" alt=""></p>
<h4 id="归档-archive"><a href="#归档-archive" class="headerlink" title="归档 (archive)"></a>归档 (archive)</h4><blockquote>
<p>与 <code>index</code>布局相同，但新增以下变量</p>
</blockquote>
<p><img src="41.png" alt=""></p>
<h4 id="分类-category"><a href="#分类-category" class="headerlink" title="分类 (category)"></a>分类 (category)</h4><blockquote>
<p>与 <code>index</code> 布局相同，但新增以下变量</p>
</blockquote>
<p><img src="42.png" alt=""></p>
<h4 id="标签-tag"><a href="#标签-tag" class="headerlink" title="标签 (tag)"></a>标签 (tag)</h4><blockquote>
<p>与<code>index</code> 布局相同，但新增以下变量</p>
</blockquote>
<p><img src="43.png" alt=""></p>
<h1 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h1><h2 id="辅助函数"><a href="#辅助函数" class="headerlink" title="辅助函数"></a><a href="https://hexo.io/zh-cn/docs/helpers.html" target="_blank" rel="external">辅助函数</a></h2><h2 id="问题解答"><a href="#问题解答" class="headerlink" title="问题解答"></a><a href="https://hexo.io/zh-cn/docs/troubleshooting.html" target="_blank" rel="external">问题解答</a></h2><h2 id="贡献"><a href="#贡献" class="headerlink" title="贡献"></a><a href="https://hexo.io/zh-cn/docs/contributing.html" target="_blank" rel="external">贡献</a></h2>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Hexo=hexo生成器(hexo n)+hexo解析器(hexo g)+hexo部署器(hexo d)。它的工作机制是：&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;hexo生成器根据&lt;code&gt;scaffolds&lt;/code&gt;目录下的&lt;code&gt;draft.md&lt;/code&gt;、&lt;code&gt;page.md&lt;/code&gt;、&lt;code&gt;post.md&lt;/code&gt;模板文件分别在&lt;code&gt;source/_draft/&lt;/code&gt;、&lt;code&gt;source/&lt;/code&gt;、&lt;code&gt;source/_post&lt;/code&gt;目录下生成对应的&lt;code&gt;filename.md&lt;/code&gt;文件和以&lt;code&gt;filename&lt;/code&gt;命名的文件夹(该文件夹是通过编辑&lt;code&gt;站点配置文件&lt;/code&gt;中的&lt;code&gt;post_asset_folder&lt;/code&gt;字段的值为&lt;code&gt;true&lt;/code&gt;实现的，可以将与&lt;code&gt;filename.md&lt;/code&gt;文件相关的所有内容都放在此文件夹中，本文会在&lt;code&gt;Asset资源文件夹&lt;/code&gt;中有介绍)&lt;/li&gt;
&lt;li&gt;hexo解析器根据&lt;code&gt;站点配置文件&lt;/code&gt;和&lt;code&gt;主题配置文件&lt;/code&gt;将根目录下的&lt;code&gt;source/&lt;/code&gt;和主题目录下的&lt;code&gt;source/&lt;/code&gt;所有文件解析成静态站点文件保存到根目录下解析器新建的&lt;code&gt;public&lt;/code&gt;目录中。解析机制是：将&lt;code&gt;.md&lt;/code&gt;文件和&lt;code&gt;.html&lt;/code&gt;文件根据对应的&lt;a href=&quot;&quot;&gt;Markdown&lt;/a&gt;语法和&lt;a href=&quot;&quot;&gt;html&lt;/a&gt;语法解析成对应的&lt;code&gt;.html&lt;/code&gt;文件。其他文件直接复制到对应目录下。此时可以通过本地浏览器预览静态站点，本质就是访问&lt;code&gt;public&lt;/code&gt;文件夹。&lt;/li&gt;
&lt;li&gt;hexo部署器先直接复制一份&lt;code&gt;public/&lt;/code&gt;目录下所有文件内容到部署器新建的&lt;code&gt;.deploy_git/&lt;/code&gt;下；然后将该目录下的所有文件&lt;code&gt;push&lt;/code&gt;到远程托管仓库，达到部署静态站点到&lt;code&gt;Internet&lt;/code&gt;上去。&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;
    
    </summary>
    
      <category term="1-Coder社区(RedArmy)" scheme="http://yoursite.com/categories/1-Coder%E7%A4%BE%E5%8C%BA-RedArmy/"/>
    
      <category term="2-虚实奇正" scheme="http://yoursite.com/categories/1-Coder%E7%A4%BE%E5%8C%BA-RedArmy/2-%E8%99%9A%E5%AE%9E%E5%A5%87%E6%AD%A3/"/>
    
      <category term="1-自建博客" scheme="http://yoursite.com/categories/1-Coder%E7%A4%BE%E5%8C%BA-RedArmy/2-%E8%99%9A%E5%AE%9E%E5%A5%87%E6%AD%A3/1-%E8%87%AA%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="2-静态" scheme="http://yoursite.com/categories/1-Coder%E7%A4%BE%E5%8C%BA-RedArmy/2-%E8%99%9A%E5%AE%9E%E5%A5%87%E6%AD%A3/1-%E8%87%AA%E5%BB%BA%E5%8D%9A%E5%AE%A2/2-%E9%9D%99%E6%80%81/"/>
    
      <category term="1-环境准备" scheme="http://yoursite.com/categories/1-Coder%E7%A4%BE%E5%8C%BA-RedArmy/2-%E8%99%9A%E5%AE%9E%E5%A5%87%E6%AD%A3/1-%E8%87%AA%E5%BB%BA%E5%8D%9A%E5%AE%A2/2-%E9%9D%99%E6%80%81/1-%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>自建静态博客之Hexo&amp;Github</title>
    <link href="http://yoursite.com/2017/03/21/Hexo-Github/"/>
    <id>http://yoursite.com/2017/03/21/Hexo-Github/</id>
    <published>2017-03-21T12:19:42.000Z</published>
    <updated>2017-03-21T12:19:42.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><strong>本教程适用于<code>Windows</code>平台</strong></p>
</blockquote>
<ul>
<li><a id="more"></a>
</li>
</ul>
<h1 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h1><blockquote>
<p><a href="http://www.mway.top/2016/10/17/hexo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E8%AF%A6%E7%BB%86%E6%AD%A5%E9%AA%A4/#" target="_blank" rel="external">郭文奇的个人博客</a></p>
<p><a href="http://kchen.cc/2016/11/12/hexo-instructions/" target="_blank" rel="external">基于 Hexo 的全自动博客构建部署系统</a></p>
</blockquote>
<h1 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h1><h2 id="必备环境"><a href="#必备环境" class="headerlink" title="必备环境"></a>必备环境</h2><h3 id="博客框架：hexo"><a href="#博客框架：hexo" class="headerlink" title="博客框架：hexo"></a>博客框架：hexo</h3><pre><code>Hexo is a fast, simple &amp; powerful blog framework.
</code></pre><blockquote>
<p><a href="https://hexo.io/zh-cn/" target="_blank" rel="external">Hexo</a>是一个极速、简单且强大的静态博客架构。它使用 Node.js 作为构建引擎，上百个文件在几秒钟内便可构建完成；而且拥有着丰富的插件库，因开源而显得生机勃勃，可扩展性很好；最重要的，它支持<a href="http://kchen.cc/2015/10/05/Markdown-Manual/#Markdown-简明语法" target="_blank" rel="external">Markdown</a> 作为书写语言，极大地方便了博客的撰写</p>
<p>详细的hexo的介绍与使用详见：<a href="">自建静态博客之Hexo详解</a></p>
</blockquote>
<h3 id="版本控制工具：git"><a href="#版本控制工具：git" class="headerlink" title="版本控制工具：git"></a>版本控制工具：git</h3><blockquote>
<p>详细的Git的介绍与使用详见：<a href="">版本控制(VCS)之Git详解</a></p>
</blockquote>
<h3 id="博客托管平台：github"><a href="#博客托管平台：github" class="headerlink" title="博客托管平台：github"></a>博客托管平台：github</h3><blockquote>
<p>详细的Github的介绍与使用详见：<a href="">代码托管之Github详解</a></p>
</blockquote>
<h2 id="可选环境"><a href="#可选环境" class="headerlink" title="可选环境"></a>可选环境</h2><h3 id="文本编辑器"><a href="#文本编辑器" class="headerlink" title="文本编辑器"></a>文本编辑器</h3><ul>
<li>sublime</li>
<li>vim</li>
<li>atom</li>
<li>notepad++</li>
</ul>
<blockquote>
<p>详细的sublime的介绍与使用详见：<a href="">文本编辑器之Sublime详解</a></p>
<p>详细的vim的介绍与使用详见：<a href="">文本编辑器之Vim详解</a></p>
</blockquote>
<h3 id="命令行工具-控制台"><a href="#命令行工具-控制台" class="headerlink" title="命令行工具(控制台)"></a>命令行工具(控制台)</h3><ul>
<li>cmder(win下)</li>
<li>git(全平台)</li>
<li><p>bash(linux下)</p>
<pre><code>总结：win平台上建议使用cmder;类Unix平台上建议使用git或者bash
</code></pre></li>
</ul>
<blockquote>
<p>详细的cmder的介绍与使用详见：<a href="">Cmder详解</a></p>
</blockquote>
<h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><h2 id="本地仓库-blog-的搭建"><a href="#本地仓库-blog-的搭建" class="headerlink" title="本地仓库(blog)的搭建"></a>本地仓库(blog)的搭建</h2><h3 id="git的下载与配置"><a href="#git的下载与配置" class="headerlink" title="git的下载与配置"></a>git的下载与配置</h3><h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><blockquote>
<p>官网下载:<a href="https://git-scm.com/downloads" target="_blank" rel="external">git download</a>–&gt;国内直接从官网下载比较困难，有时需要翻墙</p>
<p>国内下载：<a href="https://github.com/waylau/git-for-win" target="_blank" rel="external">git for win</a></p>
</blockquote>
<h4 id="安装与使用"><a href="#安装与使用" class="headerlink" title="安装与使用"></a>安装与使用</h4><blockquote>
<p><a href="https://git-scm.com/book/zh/v2" target="_blank" rel="external">参考官方说明文档</a></p>
<p><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/" target="_blank" rel="external">参考廖雪峰的博客</a></p>
<p><a href="http://pan.baidu.com/s/1bpzQBV5" target="_blank" rel="external">参考相关pdf文档</a></p>
</blockquote>
<h4 id="配置–创建本地仓库"><a href="#配置–创建本地仓库" class="headerlink" title="配置–创建本地仓库"></a>配置–创建本地仓库</h4><h5 id="新建仓库"><a href="#新建仓库" class="headerlink" title="新建仓库"></a>新建仓库</h5><blockquote>
<p>在本地新建一个文件夹作为放置博客文件的仓库（名字和地方可以自由选择，当然最好不要放在中文路径下）。如：<code>E:\anony</code></p>
</blockquote>
<h5 id="初始化仓库"><a href="#初始化仓库" class="headerlink" title="初始化仓库"></a>初始化仓库</h5><pre><code>进入E:\anony，点击鼠标右键，选择Git Bash here
</code></pre><p><img src="images/1.png" alt=""></p>
<pre><code>在命令提示符$后面输入命令：git init;初始化仓库
</code></pre><p><img src="images/2.png" alt=""></p>
<blockquote>
<p>这时Git就把仓库建好了，而且告诉你是一个空的仓库（<code>empty Git repository</code>），可以发现当前目录下（即新建的本地仓库<code>E:\anony</code>）多了一个<code>.git</code>的文件夹，这个目录是Git来跟踪管理版本库的，没事千万不要手动修改这个目录里面的文件，否则就把Git仓库给破坏了。如果你没有看到<code>.git</code>文件夹，那是因为这个目录默认是隐藏的，用<code>ls -ah</code>命令就可以看见隐藏的<code>.git</code>文件夹</p>
</blockquote>
<p><img src="images/3.png" alt=""></p>
<h3 id="hexo的安装与配置"><a href="#hexo的安装与配置" class="headerlink" title="hexo的安装与配置"></a>hexo的安装与配置</h3><blockquote>
<p>详细的hexo教程请详见：<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="external">Hexo官方教程文档</a>或<a href="">自建静态博客之Hexo详解</a></p>
</blockquote>
<h4 id="下载并安装node-js"><a href="#下载并安装node-js" class="headerlink" title="下载并安装node.js"></a>下载并安装node.js</h4><pre><code>node.js是Hexo 的构建引擎，所以安装hexo之前需要安装node.js
</code></pre><blockquote>
<p>官网下载：<a href="https://nodejs.org/en/" target="_blank" rel="external">node.js</a></p>
<p>在win上直接按照步骤安装（一直默认即可）。安装后可以使用命令：<code>node -v</code>进行查看是否安装成功</p>
</blockquote>
<p><img src="images/4.png" alt=""></p>
<p><img src="images/33.png" alt=""></p>
<h4 id="下载安装hexo"><a href="#下载安装hexo" class="headerlink" title="下载安装hexo"></a>下载安装hexo</h4><pre><code>由于官方并没有提供下载安装包，所有需要通过控制台(命令行工具)键入hexo命令进行下载安装
</code></pre><p><strong>1. 使用git下载安装</strong></p>
<pre><code>在E:\anony目录下鼠标右键，选择Git Bash here
</code></pre><p><img src="images/1.png" alt=""></p>
<pre><code>输入命令：npm install -g hexo-cli
</code></pre><p><img src="images/9.png" alt=""></p>
<pre><code>查看hexo版本：hexo --version。验证是否安装成功
</code></pre><p><img src="images/10.png" alt=""></p>
<pre><code>查看hexo命令的帮助文档：hexo
</code></pre><p><img src="images/11.png" alt=""></p>
<p><strong>2.使用cmder下载安装</strong></p>
<pre><code>在E:\anony目录下鼠标右键，选择Cmder Here
</code></pre><p><img src="images/5.png" alt=""></p>
<pre><code>输入命令：npm install -g hexo-cli
</code></pre><p><img src="images/6.png" alt=""></p>
<pre><code>查看hexo版本：hexo --version。验证是否安装成功
</code></pre><p><img src="images/7.png" alt=""></p>
<pre><code>查看hexo命令的帮助文档：hexo
</code></pre><p><img src="images/8.png" alt=""></p>
<h4 id="配置Hexo"><a href="#配置Hexo" class="headerlink" title="配置Hexo"></a>配置Hexo</h4><pre><code>注意：
&gt;&gt;在之后提到的根目录就是hexo init命令后面指定的目录（此处是blog目录）
&gt;&gt;在下面的演示过程中使用cmder控制台（git效率较低）
</code></pre><p><strong>1.使用<code>hexo init</code>命令初始化生成博客框架</strong></p>
<pre><code>在E:\anony目录下鼠标右键，选择Cmder Here
</code></pre><p><img src="images/5.png" alt=""></p>
<blockquote>
<p>输入命令：<code>hexo init blog</code>。初始化完成后会提示：<code>INFO  Start blogging with Hexo!</code>。此时可以在根目录(<code>E:\anony</code>)下生成了一个<code>blog</code>文件夹，它是用来存放建立博客网站所需要的所有文件</p>
</blockquote>
<p><img src="images/12.png" alt=""></p>
<p><strong>2.cd到根目录(blog目录)下，在输入命令：<code>npm install</code>—安装依赖包</strong></p>
<p><img src="images/13.png" alt=""></p>
<p><strong>3.此时在anony目录下生成了一个blog目录，其内容如下</strong></p>
<pre><code>blog/
  |- node_modules/  # hexo需要的模块，不需要上传GitHub
  |- themes/        # 主题文件，需要上传GitHub的dev分支
  |- sources/       # 博文md文件，需要上传GitHub的dev分支
  |- public/        # 生成的静态页面，由hexo deploy自动上传到gh-page分支
  |- package.json   # 记录hexo需要的包信息，不需要上传GitHub
  |- _config.yml    # 全局配置文件，需要上传GitHub的dev分支
  |- .gitignore     # hexo生成默认的.gitignore，它已经配置好了不需要上传的hexo文件
</code></pre><h3 id="访问本地仓库"><a href="#访问本地仓库" class="headerlink" title="访问本地仓库"></a>访问本地仓库</h3><pre><code>由于git的执行效率较低，所以下面使用cmder控制台进行演示
</code></pre><h4 id="生成博客站点文件"><a href="#生成博客站点文件" class="headerlink" title="生成博客站点文件"></a>生成博客站点文件</h4><blockquote>
<p>在根目录目录下鼠标右键，选择<code>Cmder Here</code>(或者直接使用cd命令进行切换)，输入命令：<code>hexo generate/hexo g</code>.该命令会将<code>source</code>目录下的md文档根据配置文件生成博客网站内容</p>
</blockquote>
<p><img src="images/14.png" alt=""></p>
<h4 id="启动本地服务器"><a href="#启动本地服务器" class="headerlink" title="启动本地服务器"></a>启动本地服务器</h4><pre><code>根目录下输入命令：hexo server/hexo s
</code></pre><p><img src="images/15.png" alt=""></p>
<h4 id="访问本地仓库-博客"><a href="#访问本地仓库-博客" class="headerlink" title="访问本地仓库(博客)"></a>访问本地仓库(博客)</h4><blockquote>
<p>用浏览器访问<code>http://localhost:4000/</code>，此时，可以看到一个漂亮的博客首页，当然这个博客只是在本地的，别人是看不到的，<code>hexo3.0</code>使用的默认主题是<code>landscape</code>。（这是hexo的本地预览功能）</p>
</blockquote>
<p><img src="images/16.png" alt=""></p>
<h2 id="上传本地仓库-blog-到github"><a href="#上传本地仓库-blog-到github" class="headerlink" title="上传本地仓库(blog)到github"></a>上传本地仓库(blog)到github</h2><blockquote>
<p>通过 <code>hexo server</code>搭建在本地的一个临时服务器，只有自己通过<code>http://localhost:4000</code> 才能访问到，如果想要把自己的博客发布的互联网上，需要利用一个服务器来部署你的博客。</p>
</blockquote>
<h3 id="github账号的注册与配置"><a href="#github账号的注册与配置" class="headerlink" title="github账号的注册与配置"></a>github账号的注册与配置</h3><blockquote>
<p>详细的github教程请见：<a href="">github教程</a></p>
</blockquote>
<h4 id="注册github账号"><a href="#注册github账号" class="headerlink" title="注册github账号"></a>注册github账号</h4><blockquote>
<p>登录<a href="https://github.com/" target="_blank" rel="external">github官网</a>（有时需要翻墙）</p>
<p>如果你已经有账号，那么点击右上角的sign in直接登录。</p>
<p>如果没有账号，依次输入昵称、邮箱、密码，然后点击Sign up for GitHub进行注册，按照默认的设置完成注册，最后还要进行邮件确认,我们登录到自己的注册邮箱中，会有一个github发来的邮件，点击即可。</p>
</blockquote>
<p><img src="images/17.png" alt=""></p>
<h4 id="建立远程仓库-repository"><a href="#建立远程仓库-repository" class="headerlink" title="建立远程仓库(repository)"></a>建立远程仓库(repository)</h4><blockquote>
<p>登录第一步注册的github账号，点击<code>Start a project</code>，在<code>Repository name</code>下输入仓库名，记住仓库名必须是：<code>username.github.io</code>（username与注册的github账号名必须一致），其他的保持默认即可，然后点击<code>Create repository</code>，到这里，你在github上的的一个仓库就已经建立成功。</p>
</blockquote>
<p><img src="images/18.png" alt=""><br><img src="images/19.png" alt=""></p>
<h3 id="git的配置"><a href="#git的配置" class="headerlink" title="git的配置"></a>git的配置</h3><pre><code>配置git名称和邮箱(与github的用户名和邮箱是一致的)
</code></pre><p><img src="images/20.png" alt=""></p>
<p><img src="images/21.png" alt=""></p>
<h3 id="hexo的配置"><a href="#hexo的配置" class="headerlink" title="hexo的配置"></a>hexo的配置</h3><blockquote>
<p>编辑<code>_config.yml</code>文件： 编辑<code>E：\anony\blog</code>下的<code>_config.yml</code>文件（建议使用<code>Notepad++</code>或者<code>sublime</code>）。在<code>_config.yml</code>文件的最下方，添加如下配置：</p>
</blockquote>
<p><img src="images/22.png" alt=""></p>
<blockquote>
<p>注意：<code>username</code>替换为你<code>github的账号名称</code>;hexo的配置文件中任何<code>:</code>后面都是带一个空格的，否则会报错</p>
</blockquote>
<p><img src="images/23.png" alt=""></p>
<h3 id="配置ssh-key"><a href="#配置ssh-key" class="headerlink" title="配置ssh key"></a>配置ssh key</h3><blockquote>
<p>此处可以参考<a href="https://help.github.com/articles/generating-an-ssh-key/" target="_blank" rel="external">Github官方文档</a>配置ssh key</p>
</blockquote>
<p><strong>1.在根目录下鼠标右键，选择<code>Cmder Here</code>(或者直接使用cd命令进行切换)，输入以下命令</strong></p>
<pre><code>ssh-keygen -t rsa -C &quot;Github的注册邮箱地址&quot;
</code></pre><p><strong>2.之后会要求确认路径和输入密码，我们这里使用默认的设置，一路回车就行，如果命令执行成功，会在C:\Users\Administrator目录下生成一个.ssh的文件夹（在打印信息中有提示）</strong></p>
<p><img src="images/24.png" alt=""></p>
<p><strong>3.进入<code>.ssh</code>文件夹，使用文本编辑器(sublime/notepad++)打开<code>id_rsa.pub</code>文件，复制全部内容（即生成的key）。</strong></p>
<blockquote>
<p>注意：千万不要使用Windows自带的记事本编辑任何文本文件。原因是Microsoft开发记事本的团队使用了一个非常弱智的行为来保存<code>UTF-8编码</code>的文件，他们自作聪明地在每个文件开头添加了<code>0xefbbbf</code>（十六进制）的字符，你会遇到很多不可思议的问题，比如，网页第一行可能会显示一个“?”，明明正确的程序一编译就报语法错误，等等，都是由记事本的弱智行为带来的。建议你下载Notepad++或者sublime代替记事本，不但功能强大，而且免费！Notepad++使用时需要将默认编码设置为<code>UTF-8 without BOM</code></p>
</blockquote>
<p><img src="images/25.png" alt=""></p>
<p><strong>4.登录github账号，然后在页面右下角的<code>Your repositories</code>目录下，打开创建的仓库（<code>username.github.io</code>） ，点击右上角的<code>settings</code>，左边选中<code>SSH and GPG keys</code>，右边选择<code>New SSH key</code>，<code>Title</code>可随便填写，<code>Key</code>：粘贴上面复制的key（即<code>id_rsa.pub</code>文件的全部内容），然后点击<code>Add SSH key</code>。</strong></p>
<p><img src="images/26.png" alt=""></p>
<p><img src="images/27.png" alt=""></p>
<p><strong>5.之后会收到一封github官网发来的验证邮件，打开邮件链接进行确认即可。</strong><br><strong>6.为了验证是否成功，输入以下命令</strong></p>
<pre><code>ssh -T git@github.com
</code></pre><p><img src="images/28.png" alt=""></p>
<blockquote>
<p>如果是第一次，会提示是否<code>continue</code>，输入yes就会看到：<code>You’ve successfully username, but GitHub does not provide shell access</code> （username会显示为你的账号名称）这就表示已成功连上github</p>
</blockquote>
<h3 id="上传本地仓库"><a href="#上传本地仓库" class="headerlink" title="上传本地仓库"></a>上传本地仓库</h3><p><strong>1.安装hexo-deployer-git 插件</strong></p>
<blockquote>
<p>根据官方的文档显示，现在 Hexo 支持 <code>Git</code>、<code>Heroku</code>、<code>Rsync</code>、<code>OpenShift</code>、<code>FTPSync</code> 等部署方式，我们选择 <code>Git</code> 来部署的话，需要首先安装 <code>hexo-deployer-git</code>插件</p>
</blockquote>
<pre><code>在根目录下输入命令：npm install hexo-deployer-git --save
</code></pre><p><img src="images/29.png" alt=""></p>
<p><strong>2.在根目录下依次输入下列命令</strong></p>
<pre><code>hexo generate(g)
hexo deploy(d)

以上命令可以简写成：hexo g -d
</code></pre><p><img src="images/30.png" alt=""></p>
<p><img src="images/31.png" alt=""><br><strong>3.如果上传成功，会显示<code>INFO Deploy done: git</code>，到此，就大功告成了，在浏览器中输入<code>username.github.io</code>（username替换为github的仓库名），就可以看到自己的博客了</strong></p>
<p><img src="images/32.png" alt=""></p>
<h1 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h1><h2 id="撰写博文"><a href="#撰写博文" class="headerlink" title="撰写博文"></a>撰写博文</h2><h3 id="本地创建"><a href="#本地创建" class="headerlink" title="本地创建"></a>本地创建</h3><h4 id="生成博文源文件"><a href="#生成博文源文件" class="headerlink" title="生成博文源文件"></a>生成博文源文件</h4><pre><code>hexo new
</code></pre><p><img src="images/34.png" alt=""></p>
<blockquote>
<p>新建待提交博文–在根目录下输入下列命令</p>
</blockquote>
<pre><code>hexo new post &quot;filename&quot;
</code></pre><p><img src="images/35.png" alt=""></p>
<blockquote>
<p>新建草稿博文—-在根目录下输入下列命令</p>
</blockquote>
<pre><code>hexo new draft &quot;filename&quot;
</code></pre><p><img src="images/36.png" alt=""></p>
<h4 id="编辑博文源文件"><a href="#编辑博文源文件" class="headerlink" title="编辑博文源文件"></a>编辑博文源文件</h4><blockquote>
<p>使用<code>markdownpad</code>打开博文源文件</p>
</blockquote>
<p><img src="images/37.png" alt=""></p>
<blockquote>
<p>这是 <code>post</code>模板自动帮我生成的<code>yaml</code>文件头。其中 <code>title</code>是博文的标题，我们可以改成「你好！」；<code>tags</code>是博文的标签，我们可以加上<code>「demo」</code>、<code>「hello」</code>两个标签，从第 7 行开始我们就可以撰写博客的正文了。假设我写好的博客如下：</p>
</blockquote>
<p><img src="images/40.png" alt=""></p>
<h4 id="编辑配置文件"><a href="#编辑配置文件" class="headerlink" title="编辑配置文件"></a>编辑配置文件</h4><blockquote>
<p>编辑<code>_config.yml</code>文件： 编辑<code>E：\anony\blog</code>下的<code>_config.yml</code>文件（建议使用Notepad++或者sublime）</p>
</blockquote>
<p><img src="images/38.png" alt=""></p>
<h4 id="本地预览"><a href="#本地预览" class="headerlink" title="本地预览"></a>本地预览</h4><blockquote>
<p>1.在根目录下一次输入下列命令</p>
<blockquote>
<p>hexo g<br>hexo s</p>
</blockquote>
<p>2.然后用浏览器访问<a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a></p>
</blockquote>
<p><img src="images/41.png" alt=""></p>
<h3 id="上传部署"><a href="#上传部署" class="headerlink" title="上传部署"></a>上传部署</h3><blockquote>
<p>在根目录下键入下列命令</p>
</blockquote>
<pre><code>hexo g -d
</code></pre><blockquote>
<p>如果上传成功，会显示<code>INFO Deploy done: git</code>，到此，就大功告成了，在浏览器中输入<code>username.github.io</code>（username替换为github的仓库名），就可以看到自己的博客了**</p>
</blockquote>
<h2 id="个性化配置"><a href="#个性化配置" class="headerlink" title="个性化配置"></a>个性化配置</h2><blockquote>
<p>前面我们已经了解了Hexo 的安装使用和如何部署自己的博客到 Github，现在我们来自定义一下我们博客。配置文件有两个：</p>
<blockquote>
<p>根目录的_config.yml(站点配置文件)：配置网站整体信息<br>themes目录下各主题中的_config.yml(主题配置文件)：配置网站主题信息</p>
</blockquote>
</blockquote>
<h3 id="站点配置文件"><a href="#站点配置文件" class="headerlink" title="站点配置文件"></a>站点配置文件</h3><pre><code>使用sublime打开_config.yml
</code></pre><h4 id="Site"><a href="#Site" class="headerlink" title="Site"></a>Site</h4><p><img src="images/42.png" alt=""></p>
<blockquote>
<p>这一组配置是博客的描述，<code>title</code>和<code>subtitle</code> 分别是博客的站名和副标题，<code>description</code> 对搜索引擎收录博客会有帮助。<code>language</code> 一般可以选配 <code>en</code> 或者 <code>zh-cn</code>分别是英文和简体中文。</p>
</blockquote>
<h4 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h4><p><img src="images/43.png" alt=""></p>
<blockquote>
<p>这个部分需要修改的只有 <code>url</code>选项，如果想绑定自己购买的<code>域名</code>则将<code>url</code>改成自己的域名，否则就不需要改动此部分</p>
</blockquote>
<h4 id="Extensions"><a href="#Extensions" class="headerlink" title="Extensions"></a>Extensions</h4><p><img src="images/44.png" alt=""></p>
<blockquote>
<p>这一组配置是用来定义主题和配置插件的，可以看到，官方默认的主题叫做 <code>landscape</code>，就是天际地平线的主题。<a href="https://hexo.io/themes/" target="_blank" rel="external">Hexo主题社区</a>和<a href="https://hexo.io/plugins/" target="_blank" rel="external">Hexo插件社区</a>非常非常的活跃，官方列表已经收录了 84 个制作精美的主题（字母升序排列，热度不分先后），每个主题都有很大的差别和不一样的特性，大家可以自行去列表中浏览、预览、选择自己喜欢的主题，总有一款适合你的胃口（没有就自己改😄）。例如，我现在选择 <code>yelee</code>主题</p>
</blockquote>
<h3 id="主题配置文件"><a href="#主题配置文件" class="headerlink" title="主题配置文件"></a>主题配置文件</h3><blockquote>
<p>每一个主题的详细配置参数都在<code>/themes/themename/_config.yml</code> 文件下，可以查阅<code>该主题的官方页</code>了解配置的解释;也可以根据<code>_config.yml</code>文件中的注释信息进行相关配置。</p>
<p>这里我们选择<code>yelee</code>主题做演示</p>
<p>想深度定制自己的<code>yelee</code>主题详见：<a href="">Hexo主题之yelee</a></p>
</blockquote>
<h4 id="下载yelee主题"><a href="#下载yelee主题" class="headerlink" title="下载yelee主题"></a>下载yelee主题</h4><blockquote>
<p>1.<a href="https://hexo.io/themes/" target="_blank" rel="external">官网搜索主题</a></p>
</blockquote>
<p><img src="images/45.png" alt=""></p>
<blockquote>
<p>2.鼠标放在yelee上，右键，点击复制链接</p>
</blockquote>
<p><img src="images/46.png" alt=""></p>
<blockquote>
<p>3.翻墙下载或者<code>git clone</code>下载,在根目录下打开<code>git bash</code>或者<code>cmder</code>，输入一下命令</p>
</blockquote>
<pre><code>$git clone https://github.com/MOxFIVE/hexo-theme-yelee.git themes/yelee(使用https协议clone，有时被墙无法连接)
$git clone git@github.com:MOxFIVE/hexo-theme-yelee.git themes/yelee(使用ssh协议clone，建议使用该方法，不担心由于被墙而无法连接)
</code></pre><h4 id="安装yelee主题"><a href="#安装yelee主题" class="headerlink" title="安装yelee主题"></a>安装yelee主题</h4><pre><code>将下载好的主题文件夹放到themes/下相应目录中
</code></pre><h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><pre><code>将配置文件_config.yml中的theme选项值改为：yelee
</code></pre><p><img src="images/47.png" alt=""></p>
<h4 id="主题更新"><a href="#主题更新" class="headerlink" title="主题更新"></a>主题更新</h4><pre><code>$cd themes/yelee
$git pull
</code></pre><h4 id="预览主题"><a href="#预览主题" class="headerlink" title="预览主题"></a>预览主题</h4><blockquote>
<p>保存后，我们再次执行 <code>hexo server</code>命令，预览一下网站的变化</p>
</blockquote>
<p><img src="images/48.png" alt=""></p>
<blockquote>
<p>此时主题已经发生了巨大的改变，网站左侧现在显示的是 <code>author</code> 和 <code>sutitle</code>了，右边的预览页面支持很多动态特效。每一个主题的详细配置参数都在 <code>/themes/yelee/_config.yml</code> 文件下，可以查阅该主题的官方页了解配置的解释。当你选定了自己喜欢的主题，修改、配置好了之后。便可以使用、撰写、发布自己的博客了。</p>
</blockquote>
<h1 id="深度优化"><a href="#深度优化" class="headerlink" title="深度优化"></a>深度优化</h1><h2 id="主题优化"><a href="#主题优化" class="headerlink" title="主题优化"></a>主题优化</h2><h2 id="域名绑定"><a href="#域名绑定" class="headerlink" title="域名绑定"></a>域名绑定</h2><h2 id="DNS负载均衡"><a href="#DNS负载均衡" class="headerlink" title="DNS负载均衡"></a>DNS负载均衡</h2><h2 id="Travis-CI持续集成"><a href="#Travis-CI持续集成" class="headerlink" title="Travis CI持续集成"></a>Travis CI持续集成</h2>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;本教程适用于&lt;code&gt;Windows&lt;/code&gt;平台&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
    
    </summary>
    
      <category term="1-Coder社区(RedArmy)" scheme="http://yoursite.com/categories/1-Coder%E7%A4%BE%E5%8C%BA-RedArmy/"/>
    
      <category term="2-虚实奇正" scheme="http://yoursite.com/categories/1-Coder%E7%A4%BE%E5%8C%BA-RedArmy/2-%E8%99%9A%E5%AE%9E%E5%A5%87%E6%AD%A3/"/>
    
      <category term="1-自建博客" scheme="http://yoursite.com/categories/1-Coder%E7%A4%BE%E5%8C%BA-RedArmy/2-%E8%99%9A%E5%AE%9E%E5%A5%87%E6%AD%A3/1-%E8%87%AA%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="2-静态" scheme="http://yoursite.com/categories/1-Coder%E7%A4%BE%E5%8C%BA-RedArmy/2-%E8%99%9A%E5%AE%9E%E5%A5%87%E6%AD%A3/1-%E8%87%AA%E5%BB%BA%E5%8D%9A%E5%AE%A2/2-%E9%9D%99%E6%80%81/"/>
    
      <category term="2-基本搭建" scheme="http://yoursite.com/categories/1-Coder%E7%A4%BE%E5%8C%BA-RedArmy/2-%E8%99%9A%E5%AE%9E%E5%A5%87%E6%AD%A3/1-%E8%87%AA%E5%BB%BA%E5%8D%9A%E5%AE%A2/2-%E9%9D%99%E6%80%81/2-%E5%9F%BA%E6%9C%AC%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
      <category term="github" scheme="http://yoursite.com/tags/github/"/>
    
      <category term="自建博客" scheme="http://yoursite.com/tags/%E8%87%AA%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
</feed>
